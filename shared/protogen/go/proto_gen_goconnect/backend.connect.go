// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend.proto

package proto_gen_goconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto_gen_go "panelium/proto-gen-go"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "backend.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceRegisterProcedure is the fully-qualified name of the AuthService's Register RPC.
	AuthServiceRegisterProcedure = "/backend.AuthService/Register"
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/backend.AuthService/Login"
	// AuthServiceChangePasswordProcedure is the fully-qualified name of the AuthService's
	// ChangePassword RPC.
	AuthServiceChangePasswordProcedure = "/backend.AuthService/ChangePassword"
	// AuthServiceChangePasswordRequestMFACodeProcedure is the fully-qualified name of the AuthService's
	// ChangePasswordRequestMFACode RPC.
	AuthServiceChangePasswordRequestMFACodeProcedure = "/backend.AuthService/ChangePasswordRequestMFACode"
	// AuthServiceChangePasswordVerifyMFAProcedure is the fully-qualified name of the AuthService's
	// ChangePasswordVerifyMFA RPC.
	AuthServiceChangePasswordVerifyMFAProcedure = "/backend.AuthService/ChangePasswordVerifyMFA"
	// AuthServiceRequestPasswordResetProcedure is the fully-qualified name of the AuthService's
	// RequestPasswordReset RPC.
	AuthServiceRequestPasswordResetProcedure = "/backend.AuthService/RequestPasswordReset"
	// AuthServiceResetPasswordProcedure is the fully-qualified name of the AuthService's ResetPassword
	// RPC.
	AuthServiceResetPasswordProcedure = "/backend.AuthService/ResetPassword"
	// AuthServiceResetPasswordRequestMFACodeProcedure is the fully-qualified name of the AuthService's
	// ResetPasswordRequestMFACode RPC.
	AuthServiceResetPasswordRequestMFACodeProcedure = "/backend.AuthService/ResetPasswordRequestMFACode"
	// AuthServiceResetPasswordVerifyMFAProcedure is the fully-qualified name of the AuthService's
	// ResetPasswordVerifyMFA RPC.
	AuthServiceResetPasswordVerifyMFAProcedure = "/backend.AuthService/ResetPasswordVerifyMFA"
	// AuthServiceRequestMFACodeProcedure is the fully-qualified name of the AuthService's
	// RequestMFACode RPC.
	AuthServiceRequestMFACodeProcedure = "/backend.AuthService/RequestMFACode"
	// AuthServiceVerifyMFAProcedure is the fully-qualified name of the AuthService's VerifyMFA RPC.
	AuthServiceVerifyMFAProcedure = "/backend.AuthService/VerifyMFA"
	// AuthServiceRefreshTokenProcedure is the fully-qualified name of the AuthService's RefreshToken
	// RPC.
	AuthServiceRefreshTokenProcedure = "/backend.AuthService/RefreshToken"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/backend.AuthService/Logout"
)

// AuthServiceClient is a client for the backend.AuthService service.
type AuthServiceClient interface {
	Register(context.Context, *connect.Request[proto_gen_go.RegisterRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	Login(context.Context, *connect.Request[proto_gen_go.LoginRequest]) (*connect.Response[proto_gen_go.LoginResponse], error)
	ChangePassword(context.Context, *connect.Request[proto_gen_go.ChangePasswordRequest]) (*connect.Response[proto_gen_go.ChangePasswordResponse], error)
	ChangePasswordRequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	ChangePasswordVerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error)
	RequestPasswordReset(context.Context, *connect.Request[proto_gen_go.RequestPasswordResetRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	ResetPassword(context.Context, *connect.Request[proto_gen_go.ResetPasswordRequest]) (*connect.Response[proto_gen_go.ResetPasswordResponse], error)
	ResetPasswordRequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	ResetPasswordVerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error)
	RequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	VerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error)
	RefreshToken(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	Logout(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[proto_gen_go.SuccessMessage], error)
}

// NewAuthServiceClient constructs a client for the backend.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := proto_gen_go.File_backend_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		register: connect.NewClient[proto_gen_go.RegisterRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+AuthServiceRegisterProcedure,
			connect.WithSchema(authServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[proto_gen_go.LoginRequest, proto_gen_go.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		changePassword: connect.NewClient[proto_gen_go.ChangePasswordRequest, proto_gen_go.ChangePasswordResponse](
			httpClient,
			baseURL+AuthServiceChangePasswordProcedure,
			connect.WithSchema(authServiceMethods.ByName("ChangePassword")),
			connect.WithClientOptions(opts...),
		),
		changePasswordRequestMFACode: connect.NewClient[proto_gen_go.RequestMFACodeRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+AuthServiceChangePasswordRequestMFACodeProcedure,
			connect.WithSchema(authServiceMethods.ByName("ChangePasswordRequestMFACode")),
			connect.WithClientOptions(opts...),
		),
		changePasswordVerifyMFA: connect.NewClient[proto_gen_go.VerifyMFARequest, proto_gen_go.VerifyMFAResponse](
			httpClient,
			baseURL+AuthServiceChangePasswordVerifyMFAProcedure,
			connect.WithSchema(authServiceMethods.ByName("ChangePasswordVerifyMFA")),
			connect.WithClientOptions(opts...),
		),
		requestPasswordReset: connect.NewClient[proto_gen_go.RequestPasswordResetRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+AuthServiceRequestPasswordResetProcedure,
			connect.WithSchema(authServiceMethods.ByName("RequestPasswordReset")),
			connect.WithClientOptions(opts...),
		),
		resetPassword: connect.NewClient[proto_gen_go.ResetPasswordRequest, proto_gen_go.ResetPasswordResponse](
			httpClient,
			baseURL+AuthServiceResetPasswordProcedure,
			connect.WithSchema(authServiceMethods.ByName("ResetPassword")),
			connect.WithClientOptions(opts...),
		),
		resetPasswordRequestMFACode: connect.NewClient[proto_gen_go.RequestMFACodeRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+AuthServiceResetPasswordRequestMFACodeProcedure,
			connect.WithSchema(authServiceMethods.ByName("ResetPasswordRequestMFACode")),
			connect.WithClientOptions(opts...),
		),
		resetPasswordVerifyMFA: connect.NewClient[proto_gen_go.VerifyMFARequest, proto_gen_go.VerifyMFAResponse](
			httpClient,
			baseURL+AuthServiceResetPasswordVerifyMFAProcedure,
			connect.WithSchema(authServiceMethods.ByName("ResetPasswordVerifyMFA")),
			connect.WithClientOptions(opts...),
		),
		requestMFACode: connect.NewClient[proto_gen_go.RequestMFACodeRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+AuthServiceRequestMFACodeProcedure,
			connect.WithSchema(authServiceMethods.ByName("RequestMFACode")),
			connect.WithClientOptions(opts...),
		),
		verifyMFA: connect.NewClient[proto_gen_go.VerifyMFARequest, proto_gen_go.VerifyMFAResponse](
			httpClient,
			baseURL+AuthServiceVerifyMFAProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyMFA")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[proto_gen_go.Empty, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+AuthServiceRefreshTokenProcedure,
			connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[proto_gen_go.Empty, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	register                     *connect.Client[proto_gen_go.RegisterRequest, proto_gen_go.SuccessMessage]
	login                        *connect.Client[proto_gen_go.LoginRequest, proto_gen_go.LoginResponse]
	changePassword               *connect.Client[proto_gen_go.ChangePasswordRequest, proto_gen_go.ChangePasswordResponse]
	changePasswordRequestMFACode *connect.Client[proto_gen_go.RequestMFACodeRequest, proto_gen_go.SuccessMessage]
	changePasswordVerifyMFA      *connect.Client[proto_gen_go.VerifyMFARequest, proto_gen_go.VerifyMFAResponse]
	requestPasswordReset         *connect.Client[proto_gen_go.RequestPasswordResetRequest, proto_gen_go.SuccessMessage]
	resetPassword                *connect.Client[proto_gen_go.ResetPasswordRequest, proto_gen_go.ResetPasswordResponse]
	resetPasswordRequestMFACode  *connect.Client[proto_gen_go.RequestMFACodeRequest, proto_gen_go.SuccessMessage]
	resetPasswordVerifyMFA       *connect.Client[proto_gen_go.VerifyMFARequest, proto_gen_go.VerifyMFAResponse]
	requestMFACode               *connect.Client[proto_gen_go.RequestMFACodeRequest, proto_gen_go.SuccessMessage]
	verifyMFA                    *connect.Client[proto_gen_go.VerifyMFARequest, proto_gen_go.VerifyMFAResponse]
	refreshToken                 *connect.Client[proto_gen_go.Empty, proto_gen_go.SuccessMessage]
	logout                       *connect.Client[proto_gen_go.Empty, proto_gen_go.SuccessMessage]
}

// Register calls backend.AuthService.Register.
func (c *authServiceClient) Register(ctx context.Context, req *connect.Request[proto_gen_go.RegisterRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.register.CallUnary(ctx, req)
}

// Login calls backend.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[proto_gen_go.LoginRequest]) (*connect.Response[proto_gen_go.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// ChangePassword calls backend.AuthService.ChangePassword.
func (c *authServiceClient) ChangePassword(ctx context.Context, req *connect.Request[proto_gen_go.ChangePasswordRequest]) (*connect.Response[proto_gen_go.ChangePasswordResponse], error) {
	return c.changePassword.CallUnary(ctx, req)
}

// ChangePasswordRequestMFACode calls backend.AuthService.ChangePasswordRequestMFACode.
func (c *authServiceClient) ChangePasswordRequestMFACode(ctx context.Context, req *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.changePasswordRequestMFACode.CallUnary(ctx, req)
}

// ChangePasswordVerifyMFA calls backend.AuthService.ChangePasswordVerifyMFA.
func (c *authServiceClient) ChangePasswordVerifyMFA(ctx context.Context, req *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error) {
	return c.changePasswordVerifyMFA.CallUnary(ctx, req)
}

// RequestPasswordReset calls backend.AuthService.RequestPasswordReset.
func (c *authServiceClient) RequestPasswordReset(ctx context.Context, req *connect.Request[proto_gen_go.RequestPasswordResetRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.requestPasswordReset.CallUnary(ctx, req)
}

// ResetPassword calls backend.AuthService.ResetPassword.
func (c *authServiceClient) ResetPassword(ctx context.Context, req *connect.Request[proto_gen_go.ResetPasswordRequest]) (*connect.Response[proto_gen_go.ResetPasswordResponse], error) {
	return c.resetPassword.CallUnary(ctx, req)
}

// ResetPasswordRequestMFACode calls backend.AuthService.ResetPasswordRequestMFACode.
func (c *authServiceClient) ResetPasswordRequestMFACode(ctx context.Context, req *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.resetPasswordRequestMFACode.CallUnary(ctx, req)
}

// ResetPasswordVerifyMFA calls backend.AuthService.ResetPasswordVerifyMFA.
func (c *authServiceClient) ResetPasswordVerifyMFA(ctx context.Context, req *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error) {
	return c.resetPasswordVerifyMFA.CallUnary(ctx, req)
}

// RequestMFACode calls backend.AuthService.RequestMFACode.
func (c *authServiceClient) RequestMFACode(ctx context.Context, req *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.requestMFACode.CallUnary(ctx, req)
}

// VerifyMFA calls backend.AuthService.VerifyMFA.
func (c *authServiceClient) VerifyMFA(ctx context.Context, req *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error) {
	return c.verifyMFA.CallUnary(ctx, req)
}

// RefreshToken calls backend.AuthService.RefreshToken.
func (c *authServiceClient) RefreshToken(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// Logout calls backend.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.logout.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the backend.AuthService service.
type AuthServiceHandler interface {
	Register(context.Context, *connect.Request[proto_gen_go.RegisterRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	Login(context.Context, *connect.Request[proto_gen_go.LoginRequest]) (*connect.Response[proto_gen_go.LoginResponse], error)
	ChangePassword(context.Context, *connect.Request[proto_gen_go.ChangePasswordRequest]) (*connect.Response[proto_gen_go.ChangePasswordResponse], error)
	ChangePasswordRequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	ChangePasswordVerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error)
	RequestPasswordReset(context.Context, *connect.Request[proto_gen_go.RequestPasswordResetRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	ResetPassword(context.Context, *connect.Request[proto_gen_go.ResetPasswordRequest]) (*connect.Response[proto_gen_go.ResetPasswordResponse], error)
	ResetPasswordRequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	ResetPasswordVerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error)
	RequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	VerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error)
	RefreshToken(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	Logout(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[proto_gen_go.SuccessMessage], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := proto_gen_go.File_backend_proto.Services().ByName("AuthService").Methods()
	authServiceRegisterHandler := connect.NewUnaryHandler(
		AuthServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(authServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceChangePasswordHandler := connect.NewUnaryHandler(
		AuthServiceChangePasswordProcedure,
		svc.ChangePassword,
		connect.WithSchema(authServiceMethods.ByName("ChangePassword")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceChangePasswordRequestMFACodeHandler := connect.NewUnaryHandler(
		AuthServiceChangePasswordRequestMFACodeProcedure,
		svc.ChangePasswordRequestMFACode,
		connect.WithSchema(authServiceMethods.ByName("ChangePasswordRequestMFACode")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceChangePasswordVerifyMFAHandler := connect.NewUnaryHandler(
		AuthServiceChangePasswordVerifyMFAProcedure,
		svc.ChangePasswordVerifyMFA,
		connect.WithSchema(authServiceMethods.ByName("ChangePasswordVerifyMFA")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRequestPasswordResetHandler := connect.NewUnaryHandler(
		AuthServiceRequestPasswordResetProcedure,
		svc.RequestPasswordReset,
		connect.WithSchema(authServiceMethods.ByName("RequestPasswordReset")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceResetPasswordHandler := connect.NewUnaryHandler(
		AuthServiceResetPasswordProcedure,
		svc.ResetPassword,
		connect.WithSchema(authServiceMethods.ByName("ResetPassword")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceResetPasswordRequestMFACodeHandler := connect.NewUnaryHandler(
		AuthServiceResetPasswordRequestMFACodeProcedure,
		svc.ResetPasswordRequestMFACode,
		connect.WithSchema(authServiceMethods.ByName("ResetPasswordRequestMFACode")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceResetPasswordVerifyMFAHandler := connect.NewUnaryHandler(
		AuthServiceResetPasswordVerifyMFAProcedure,
		svc.ResetPasswordVerifyMFA,
		connect.WithSchema(authServiceMethods.ByName("ResetPasswordVerifyMFA")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRequestMFACodeHandler := connect.NewUnaryHandler(
		AuthServiceRequestMFACodeProcedure,
		svc.RequestMFACode,
		connect.WithSchema(authServiceMethods.ByName("RequestMFACode")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyMFAHandler := connect.NewUnaryHandler(
		AuthServiceVerifyMFAProcedure,
		svc.VerifyMFA,
		connect.WithSchema(authServiceMethods.ByName("VerifyMFA")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRefreshTokenHandler := connect.NewUnaryHandler(
		AuthServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(authServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceRegisterProcedure:
			authServiceRegisterHandler.ServeHTTP(w, r)
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceChangePasswordProcedure:
			authServiceChangePasswordHandler.ServeHTTP(w, r)
		case AuthServiceChangePasswordRequestMFACodeProcedure:
			authServiceChangePasswordRequestMFACodeHandler.ServeHTTP(w, r)
		case AuthServiceChangePasswordVerifyMFAProcedure:
			authServiceChangePasswordVerifyMFAHandler.ServeHTTP(w, r)
		case AuthServiceRequestPasswordResetProcedure:
			authServiceRequestPasswordResetHandler.ServeHTTP(w, r)
		case AuthServiceResetPasswordProcedure:
			authServiceResetPasswordHandler.ServeHTTP(w, r)
		case AuthServiceResetPasswordRequestMFACodeProcedure:
			authServiceResetPasswordRequestMFACodeHandler.ServeHTTP(w, r)
		case AuthServiceResetPasswordVerifyMFAProcedure:
			authServiceResetPasswordVerifyMFAHandler.ServeHTTP(w, r)
		case AuthServiceRequestMFACodeProcedure:
			authServiceRequestMFACodeHandler.ServeHTTP(w, r)
		case AuthServiceVerifyMFAProcedure:
			authServiceVerifyMFAHandler.ServeHTTP(w, r)
		case AuthServiceRefreshTokenProcedure:
			authServiceRefreshTokenHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Register(context.Context, *connect.Request[proto_gen_go.RegisterRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.Register is not implemented"))
}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[proto_gen_go.LoginRequest]) (*connect.Response[proto_gen_go.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) ChangePassword(context.Context, *connect.Request[proto_gen_go.ChangePasswordRequest]) (*connect.Response[proto_gen_go.ChangePasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.ChangePassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) ChangePasswordRequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.ChangePasswordRequestMFACode is not implemented"))
}

func (UnimplementedAuthServiceHandler) ChangePasswordVerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.ChangePasswordVerifyMFA is not implemented"))
}

func (UnimplementedAuthServiceHandler) RequestPasswordReset(context.Context, *connect.Request[proto_gen_go.RequestPasswordResetRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.RequestPasswordReset is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResetPassword(context.Context, *connect.Request[proto_gen_go.ResetPasswordRequest]) (*connect.Response[proto_gen_go.ResetPasswordResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.ResetPassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResetPasswordRequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.ResetPasswordRequestMFACode is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResetPasswordVerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.ResetPasswordVerifyMFA is not implemented"))
}

func (UnimplementedAuthServiceHandler) RequestMFACode(context.Context, *connect.Request[proto_gen_go.RequestMFACodeRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.RequestMFACode is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyMFA(context.Context, *connect.Request[proto_gen_go.VerifyMFARequest]) (*connect.Response[proto_gen_go.VerifyMFAResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.VerifyMFA is not implemented"))
}

func (UnimplementedAuthServiceHandler) RefreshToken(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.RefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.AuthService.Logout is not implemented"))
}

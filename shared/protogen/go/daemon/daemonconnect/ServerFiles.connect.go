// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: daemon/ServerFiles.proto

package daemonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	daemon "panelium/proto_gen_go/daemon"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServerFilesServiceName is the fully-qualified name of the ServerFilesService service.
	ServerFilesServiceName = "daemon.ServerFilesService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerFilesServiceListDirectoryProcedure is the fully-qualified name of the ServerFilesService's
	// ListDirectory RPC.
	ServerFilesServiceListDirectoryProcedure = "/daemon.ServerFilesService/ListDirectory"
	// ServerFilesServiceCreateDirectoryProcedure is the fully-qualified name of the
	// ServerFilesService's CreateDirectory RPC.
	ServerFilesServiceCreateDirectoryProcedure = "/daemon.ServerFilesService/CreateDirectory"
	// ServerFilesServiceGetDirectorySizeProcedure is the fully-qualified name of the
	// ServerFilesService's GetDirectorySize RPC.
	ServerFilesServiceGetDirectorySizeProcedure = "/daemon.ServerFilesService/GetDirectorySize"
	// ServerFilesServiceReadFileProcedure is the fully-qualified name of the ServerFilesService's
	// ReadFile RPC.
	ServerFilesServiceReadFileProcedure = "/daemon.ServerFilesService/ReadFile"
	// ServerFilesServiceWriteFileProcedure is the fully-qualified name of the ServerFilesService's
	// WriteFile RPC.
	ServerFilesServiceWriteFileProcedure = "/daemon.ServerFilesService/WriteFile"
	// ServerFilesServiceDeleteFileProcedure is the fully-qualified name of the ServerFilesService's
	// DeleteFile RPC.
	ServerFilesServiceDeleteFileProcedure = "/daemon.ServerFilesService/DeleteFile"
	// ServerFilesServiceMoveFileProcedure is the fully-qualified name of the ServerFilesService's
	// MoveFile RPC.
	ServerFilesServiceMoveFileProcedure = "/daemon.ServerFilesService/MoveFile"
	// ServerFilesServiceCopyFileProcedure is the fully-qualified name of the ServerFilesService's
	// CopyFile RPC.
	ServerFilesServiceCopyFileProcedure = "/daemon.ServerFilesService/CopyFile"
	// ServerFilesServiceCompressFileProcedure is the fully-qualified name of the ServerFilesService's
	// CompressFile RPC.
	ServerFilesServiceCompressFileProcedure = "/daemon.ServerFilesService/CompressFile"
	// ServerFilesServiceDecompressFileProcedure is the fully-qualified name of the ServerFilesService's
	// DecompressFile RPC.
	ServerFilesServiceDecompressFileProcedure = "/daemon.ServerFilesService/DecompressFile"
	// ServerFilesServiceChangeFilePermissionsProcedure is the fully-qualified name of the
	// ServerFilesService's ChangeFilePermissions RPC.
	ServerFilesServiceChangeFilePermissionsProcedure = "/daemon.ServerFilesService/ChangeFilePermissions"
	// ServerFilesServiceGetFilePermissionsProcedure is the fully-qualified name of the
	// ServerFilesService's GetFilePermissions RPC.
	ServerFilesServiceGetFilePermissionsProcedure = "/daemon.ServerFilesService/GetFilePermissions"
	// ServerFilesServiceSearchFilesProcedure is the fully-qualified name of the ServerFilesService's
	// SearchFiles RPC.
	ServerFilesServiceSearchFilesProcedure = "/daemon.ServerFilesService/SearchFiles"
)

// ServerFilesServiceClient is a client for the daemon.ServerFilesService service.
type ServerFilesServiceClient interface {
	// Directory operations
	ListDirectory(context.Context, *connect.Request[daemon.ListDirectoryRequest]) (*connect.Response[daemon.ListDirectoryResponse], error)
	CreateDirectory(context.Context, *connect.Request[daemon.CreateDirectoryRequest]) (*connect.Response[daemon.CreateDirectoryResponse], error)
	GetDirectorySize(context.Context, *connect.Request[daemon.GetDirectorySizeRequest]) (*connect.Response[daemon.GetDirectorySizeResponse], error)
	// File operations
	ReadFile(context.Context, *connect.Request[daemon.ReadFileRequest]) (*connect.Response[daemon.ReadFileResponse], error)
	WriteFile(context.Context, *connect.Request[daemon.WriteFileRequest]) (*connect.Response[daemon.WriteFileResponse], error)
	DeleteFile(context.Context, *connect.Request[daemon.DeleteFileRequest]) (*connect.Response[daemon.DeleteFileResponse], error)
	// Movement operations
	MoveFile(context.Context, *connect.Request[daemon.MoveFileRequest]) (*connect.Response[daemon.MoveFileResponse], error)
	CopyFile(context.Context, *connect.Request[daemon.CopyFileRequest]) (*connect.Response[daemon.CopyFileResponse], error)
	// Compression operations
	CompressFile(context.Context, *connect.Request[daemon.CompressFileRequest]) (*connect.Response[daemon.CompressFileResponse], error)
	DecompressFile(context.Context, *connect.Request[daemon.DecompressFileRequest]) (*connect.Response[daemon.DecompressFileResponse], error)
	// File permissions operations
	ChangeFilePermissions(context.Context, *connect.Request[daemon.ChangeFilePermissionsRequest]) (*connect.Response[daemon.ChangeFilePermissionsResponse], error)
	GetFilePermissions(context.Context, *connect.Request[daemon.GetFilePermissionsRequest]) (*connect.Response[daemon.GetFilePermissionsResponse], error)
	// Search files
	SearchFiles(context.Context, *connect.Request[daemon.SearchFilesRequest]) (*connect.Response[daemon.SearchFilesResponse], error)
}

// NewServerFilesServiceClient constructs a client for the daemon.ServerFilesService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerFilesServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServerFilesServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serverFilesServiceMethods := daemon.File_daemon_ServerFiles_proto.Services().ByName("ServerFilesService").Methods()
	return &serverFilesServiceClient{
		listDirectory: connect.NewClient[daemon.ListDirectoryRequest, daemon.ListDirectoryResponse](
			httpClient,
			baseURL+ServerFilesServiceListDirectoryProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("ListDirectory")),
			connect.WithClientOptions(opts...),
		),
		createDirectory: connect.NewClient[daemon.CreateDirectoryRequest, daemon.CreateDirectoryResponse](
			httpClient,
			baseURL+ServerFilesServiceCreateDirectoryProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("CreateDirectory")),
			connect.WithClientOptions(opts...),
		),
		getDirectorySize: connect.NewClient[daemon.GetDirectorySizeRequest, daemon.GetDirectorySizeResponse](
			httpClient,
			baseURL+ServerFilesServiceGetDirectorySizeProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("GetDirectorySize")),
			connect.WithClientOptions(opts...),
		),
		readFile: connect.NewClient[daemon.ReadFileRequest, daemon.ReadFileResponse](
			httpClient,
			baseURL+ServerFilesServiceReadFileProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("ReadFile")),
			connect.WithClientOptions(opts...),
		),
		writeFile: connect.NewClient[daemon.WriteFileRequest, daemon.WriteFileResponse](
			httpClient,
			baseURL+ServerFilesServiceWriteFileProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("WriteFile")),
			connect.WithClientOptions(opts...),
		),
		deleteFile: connect.NewClient[daemon.DeleteFileRequest, daemon.DeleteFileResponse](
			httpClient,
			baseURL+ServerFilesServiceDeleteFileProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("DeleteFile")),
			connect.WithClientOptions(opts...),
		),
		moveFile: connect.NewClient[daemon.MoveFileRequest, daemon.MoveFileResponse](
			httpClient,
			baseURL+ServerFilesServiceMoveFileProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("MoveFile")),
			connect.WithClientOptions(opts...),
		),
		copyFile: connect.NewClient[daemon.CopyFileRequest, daemon.CopyFileResponse](
			httpClient,
			baseURL+ServerFilesServiceCopyFileProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("CopyFile")),
			connect.WithClientOptions(opts...),
		),
		compressFile: connect.NewClient[daemon.CompressFileRequest, daemon.CompressFileResponse](
			httpClient,
			baseURL+ServerFilesServiceCompressFileProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("CompressFile")),
			connect.WithClientOptions(opts...),
		),
		decompressFile: connect.NewClient[daemon.DecompressFileRequest, daemon.DecompressFileResponse](
			httpClient,
			baseURL+ServerFilesServiceDecompressFileProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("DecompressFile")),
			connect.WithClientOptions(opts...),
		),
		changeFilePermissions: connect.NewClient[daemon.ChangeFilePermissionsRequest, daemon.ChangeFilePermissionsResponse](
			httpClient,
			baseURL+ServerFilesServiceChangeFilePermissionsProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("ChangeFilePermissions")),
			connect.WithClientOptions(opts...),
		),
		getFilePermissions: connect.NewClient[daemon.GetFilePermissionsRequest, daemon.GetFilePermissionsResponse](
			httpClient,
			baseURL+ServerFilesServiceGetFilePermissionsProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("GetFilePermissions")),
			connect.WithClientOptions(opts...),
		),
		searchFiles: connect.NewClient[daemon.SearchFilesRequest, daemon.SearchFilesResponse](
			httpClient,
			baseURL+ServerFilesServiceSearchFilesProcedure,
			connect.WithSchema(serverFilesServiceMethods.ByName("SearchFiles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serverFilesServiceClient implements ServerFilesServiceClient.
type serverFilesServiceClient struct {
	listDirectory         *connect.Client[daemon.ListDirectoryRequest, daemon.ListDirectoryResponse]
	createDirectory       *connect.Client[daemon.CreateDirectoryRequest, daemon.CreateDirectoryResponse]
	getDirectorySize      *connect.Client[daemon.GetDirectorySizeRequest, daemon.GetDirectorySizeResponse]
	readFile              *connect.Client[daemon.ReadFileRequest, daemon.ReadFileResponse]
	writeFile             *connect.Client[daemon.WriteFileRequest, daemon.WriteFileResponse]
	deleteFile            *connect.Client[daemon.DeleteFileRequest, daemon.DeleteFileResponse]
	moveFile              *connect.Client[daemon.MoveFileRequest, daemon.MoveFileResponse]
	copyFile              *connect.Client[daemon.CopyFileRequest, daemon.CopyFileResponse]
	compressFile          *connect.Client[daemon.CompressFileRequest, daemon.CompressFileResponse]
	decompressFile        *connect.Client[daemon.DecompressFileRequest, daemon.DecompressFileResponse]
	changeFilePermissions *connect.Client[daemon.ChangeFilePermissionsRequest, daemon.ChangeFilePermissionsResponse]
	getFilePermissions    *connect.Client[daemon.GetFilePermissionsRequest, daemon.GetFilePermissionsResponse]
	searchFiles           *connect.Client[daemon.SearchFilesRequest, daemon.SearchFilesResponse]
}

// ListDirectory calls daemon.ServerFilesService.ListDirectory.
func (c *serverFilesServiceClient) ListDirectory(ctx context.Context, req *connect.Request[daemon.ListDirectoryRequest]) (*connect.Response[daemon.ListDirectoryResponse], error) {
	return c.listDirectory.CallUnary(ctx, req)
}

// CreateDirectory calls daemon.ServerFilesService.CreateDirectory.
func (c *serverFilesServiceClient) CreateDirectory(ctx context.Context, req *connect.Request[daemon.CreateDirectoryRequest]) (*connect.Response[daemon.CreateDirectoryResponse], error) {
	return c.createDirectory.CallUnary(ctx, req)
}

// GetDirectorySize calls daemon.ServerFilesService.GetDirectorySize.
func (c *serverFilesServiceClient) GetDirectorySize(ctx context.Context, req *connect.Request[daemon.GetDirectorySizeRequest]) (*connect.Response[daemon.GetDirectorySizeResponse], error) {
	return c.getDirectorySize.CallUnary(ctx, req)
}

// ReadFile calls daemon.ServerFilesService.ReadFile.
func (c *serverFilesServiceClient) ReadFile(ctx context.Context, req *connect.Request[daemon.ReadFileRequest]) (*connect.Response[daemon.ReadFileResponse], error) {
	return c.readFile.CallUnary(ctx, req)
}

// WriteFile calls daemon.ServerFilesService.WriteFile.
func (c *serverFilesServiceClient) WriteFile(ctx context.Context, req *connect.Request[daemon.WriteFileRequest]) (*connect.Response[daemon.WriteFileResponse], error) {
	return c.writeFile.CallUnary(ctx, req)
}

// DeleteFile calls daemon.ServerFilesService.DeleteFile.
func (c *serverFilesServiceClient) DeleteFile(ctx context.Context, req *connect.Request[daemon.DeleteFileRequest]) (*connect.Response[daemon.DeleteFileResponse], error) {
	return c.deleteFile.CallUnary(ctx, req)
}

// MoveFile calls daemon.ServerFilesService.MoveFile.
func (c *serverFilesServiceClient) MoveFile(ctx context.Context, req *connect.Request[daemon.MoveFileRequest]) (*connect.Response[daemon.MoveFileResponse], error) {
	return c.moveFile.CallUnary(ctx, req)
}

// CopyFile calls daemon.ServerFilesService.CopyFile.
func (c *serverFilesServiceClient) CopyFile(ctx context.Context, req *connect.Request[daemon.CopyFileRequest]) (*connect.Response[daemon.CopyFileResponse], error) {
	return c.copyFile.CallUnary(ctx, req)
}

// CompressFile calls daemon.ServerFilesService.CompressFile.
func (c *serverFilesServiceClient) CompressFile(ctx context.Context, req *connect.Request[daemon.CompressFileRequest]) (*connect.Response[daemon.CompressFileResponse], error) {
	return c.compressFile.CallUnary(ctx, req)
}

// DecompressFile calls daemon.ServerFilesService.DecompressFile.
func (c *serverFilesServiceClient) DecompressFile(ctx context.Context, req *connect.Request[daemon.DecompressFileRequest]) (*connect.Response[daemon.DecompressFileResponse], error) {
	return c.decompressFile.CallUnary(ctx, req)
}

// ChangeFilePermissions calls daemon.ServerFilesService.ChangeFilePermissions.
func (c *serverFilesServiceClient) ChangeFilePermissions(ctx context.Context, req *connect.Request[daemon.ChangeFilePermissionsRequest]) (*connect.Response[daemon.ChangeFilePermissionsResponse], error) {
	return c.changeFilePermissions.CallUnary(ctx, req)
}

// GetFilePermissions calls daemon.ServerFilesService.GetFilePermissions.
func (c *serverFilesServiceClient) GetFilePermissions(ctx context.Context, req *connect.Request[daemon.GetFilePermissionsRequest]) (*connect.Response[daemon.GetFilePermissionsResponse], error) {
	return c.getFilePermissions.CallUnary(ctx, req)
}

// SearchFiles calls daemon.ServerFilesService.SearchFiles.
func (c *serverFilesServiceClient) SearchFiles(ctx context.Context, req *connect.Request[daemon.SearchFilesRequest]) (*connect.Response[daemon.SearchFilesResponse], error) {
	return c.searchFiles.CallUnary(ctx, req)
}

// ServerFilesServiceHandler is an implementation of the daemon.ServerFilesService service.
type ServerFilesServiceHandler interface {
	// Directory operations
	ListDirectory(context.Context, *connect.Request[daemon.ListDirectoryRequest]) (*connect.Response[daemon.ListDirectoryResponse], error)
	CreateDirectory(context.Context, *connect.Request[daemon.CreateDirectoryRequest]) (*connect.Response[daemon.CreateDirectoryResponse], error)
	GetDirectorySize(context.Context, *connect.Request[daemon.GetDirectorySizeRequest]) (*connect.Response[daemon.GetDirectorySizeResponse], error)
	// File operations
	ReadFile(context.Context, *connect.Request[daemon.ReadFileRequest]) (*connect.Response[daemon.ReadFileResponse], error)
	WriteFile(context.Context, *connect.Request[daemon.WriteFileRequest]) (*connect.Response[daemon.WriteFileResponse], error)
	DeleteFile(context.Context, *connect.Request[daemon.DeleteFileRequest]) (*connect.Response[daemon.DeleteFileResponse], error)
	// Movement operations
	MoveFile(context.Context, *connect.Request[daemon.MoveFileRequest]) (*connect.Response[daemon.MoveFileResponse], error)
	CopyFile(context.Context, *connect.Request[daemon.CopyFileRequest]) (*connect.Response[daemon.CopyFileResponse], error)
	// Compression operations
	CompressFile(context.Context, *connect.Request[daemon.CompressFileRequest]) (*connect.Response[daemon.CompressFileResponse], error)
	DecompressFile(context.Context, *connect.Request[daemon.DecompressFileRequest]) (*connect.Response[daemon.DecompressFileResponse], error)
	// File permissions operations
	ChangeFilePermissions(context.Context, *connect.Request[daemon.ChangeFilePermissionsRequest]) (*connect.Response[daemon.ChangeFilePermissionsResponse], error)
	GetFilePermissions(context.Context, *connect.Request[daemon.GetFilePermissionsRequest]) (*connect.Response[daemon.GetFilePermissionsResponse], error)
	// Search files
	SearchFiles(context.Context, *connect.Request[daemon.SearchFilesRequest]) (*connect.Response[daemon.SearchFilesResponse], error)
}

// NewServerFilesServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerFilesServiceHandler(svc ServerFilesServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serverFilesServiceMethods := daemon.File_daemon_ServerFiles_proto.Services().ByName("ServerFilesService").Methods()
	serverFilesServiceListDirectoryHandler := connect.NewUnaryHandler(
		ServerFilesServiceListDirectoryProcedure,
		svc.ListDirectory,
		connect.WithSchema(serverFilesServiceMethods.ByName("ListDirectory")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceCreateDirectoryHandler := connect.NewUnaryHandler(
		ServerFilesServiceCreateDirectoryProcedure,
		svc.CreateDirectory,
		connect.WithSchema(serverFilesServiceMethods.ByName("CreateDirectory")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceGetDirectorySizeHandler := connect.NewUnaryHandler(
		ServerFilesServiceGetDirectorySizeProcedure,
		svc.GetDirectorySize,
		connect.WithSchema(serverFilesServiceMethods.ByName("GetDirectorySize")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceReadFileHandler := connect.NewUnaryHandler(
		ServerFilesServiceReadFileProcedure,
		svc.ReadFile,
		connect.WithSchema(serverFilesServiceMethods.ByName("ReadFile")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceWriteFileHandler := connect.NewUnaryHandler(
		ServerFilesServiceWriteFileProcedure,
		svc.WriteFile,
		connect.WithSchema(serverFilesServiceMethods.ByName("WriteFile")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceDeleteFileHandler := connect.NewUnaryHandler(
		ServerFilesServiceDeleteFileProcedure,
		svc.DeleteFile,
		connect.WithSchema(serverFilesServiceMethods.ByName("DeleteFile")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceMoveFileHandler := connect.NewUnaryHandler(
		ServerFilesServiceMoveFileProcedure,
		svc.MoveFile,
		connect.WithSchema(serverFilesServiceMethods.ByName("MoveFile")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceCopyFileHandler := connect.NewUnaryHandler(
		ServerFilesServiceCopyFileProcedure,
		svc.CopyFile,
		connect.WithSchema(serverFilesServiceMethods.ByName("CopyFile")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceCompressFileHandler := connect.NewUnaryHandler(
		ServerFilesServiceCompressFileProcedure,
		svc.CompressFile,
		connect.WithSchema(serverFilesServiceMethods.ByName("CompressFile")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceDecompressFileHandler := connect.NewUnaryHandler(
		ServerFilesServiceDecompressFileProcedure,
		svc.DecompressFile,
		connect.WithSchema(serverFilesServiceMethods.ByName("DecompressFile")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceChangeFilePermissionsHandler := connect.NewUnaryHandler(
		ServerFilesServiceChangeFilePermissionsProcedure,
		svc.ChangeFilePermissions,
		connect.WithSchema(serverFilesServiceMethods.ByName("ChangeFilePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceGetFilePermissionsHandler := connect.NewUnaryHandler(
		ServerFilesServiceGetFilePermissionsProcedure,
		svc.GetFilePermissions,
		connect.WithSchema(serverFilesServiceMethods.ByName("GetFilePermissions")),
		connect.WithHandlerOptions(opts...),
	)
	serverFilesServiceSearchFilesHandler := connect.NewUnaryHandler(
		ServerFilesServiceSearchFilesProcedure,
		svc.SearchFiles,
		connect.WithSchema(serverFilesServiceMethods.ByName("SearchFiles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/daemon.ServerFilesService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServerFilesServiceListDirectoryProcedure:
			serverFilesServiceListDirectoryHandler.ServeHTTP(w, r)
		case ServerFilesServiceCreateDirectoryProcedure:
			serverFilesServiceCreateDirectoryHandler.ServeHTTP(w, r)
		case ServerFilesServiceGetDirectorySizeProcedure:
			serverFilesServiceGetDirectorySizeHandler.ServeHTTP(w, r)
		case ServerFilesServiceReadFileProcedure:
			serverFilesServiceReadFileHandler.ServeHTTP(w, r)
		case ServerFilesServiceWriteFileProcedure:
			serverFilesServiceWriteFileHandler.ServeHTTP(w, r)
		case ServerFilesServiceDeleteFileProcedure:
			serverFilesServiceDeleteFileHandler.ServeHTTP(w, r)
		case ServerFilesServiceMoveFileProcedure:
			serverFilesServiceMoveFileHandler.ServeHTTP(w, r)
		case ServerFilesServiceCopyFileProcedure:
			serverFilesServiceCopyFileHandler.ServeHTTP(w, r)
		case ServerFilesServiceCompressFileProcedure:
			serverFilesServiceCompressFileHandler.ServeHTTP(w, r)
		case ServerFilesServiceDecompressFileProcedure:
			serverFilesServiceDecompressFileHandler.ServeHTTP(w, r)
		case ServerFilesServiceChangeFilePermissionsProcedure:
			serverFilesServiceChangeFilePermissionsHandler.ServeHTTP(w, r)
		case ServerFilesServiceGetFilePermissionsProcedure:
			serverFilesServiceGetFilePermissionsHandler.ServeHTTP(w, r)
		case ServerFilesServiceSearchFilesProcedure:
			serverFilesServiceSearchFilesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServerFilesServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerFilesServiceHandler struct{}

func (UnimplementedServerFilesServiceHandler) ListDirectory(context.Context, *connect.Request[daemon.ListDirectoryRequest]) (*connect.Response[daemon.ListDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.ListDirectory is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) CreateDirectory(context.Context, *connect.Request[daemon.CreateDirectoryRequest]) (*connect.Response[daemon.CreateDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.CreateDirectory is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) GetDirectorySize(context.Context, *connect.Request[daemon.GetDirectorySizeRequest]) (*connect.Response[daemon.GetDirectorySizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.GetDirectorySize is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) ReadFile(context.Context, *connect.Request[daemon.ReadFileRequest]) (*connect.Response[daemon.ReadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.ReadFile is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) WriteFile(context.Context, *connect.Request[daemon.WriteFileRequest]) (*connect.Response[daemon.WriteFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.WriteFile is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) DeleteFile(context.Context, *connect.Request[daemon.DeleteFileRequest]) (*connect.Response[daemon.DeleteFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.DeleteFile is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) MoveFile(context.Context, *connect.Request[daemon.MoveFileRequest]) (*connect.Response[daemon.MoveFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.MoveFile is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) CopyFile(context.Context, *connect.Request[daemon.CopyFileRequest]) (*connect.Response[daemon.CopyFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.CopyFile is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) CompressFile(context.Context, *connect.Request[daemon.CompressFileRequest]) (*connect.Response[daemon.CompressFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.CompressFile is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) DecompressFile(context.Context, *connect.Request[daemon.DecompressFileRequest]) (*connect.Response[daemon.DecompressFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.DecompressFile is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) ChangeFilePermissions(context.Context, *connect.Request[daemon.ChangeFilePermissionsRequest]) (*connect.Response[daemon.ChangeFilePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.ChangeFilePermissions is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) GetFilePermissions(context.Context, *connect.Request[daemon.GetFilePermissionsRequest]) (*connect.Response[daemon.GetFilePermissionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.GetFilePermissions is not implemented"))
}

func (UnimplementedServerFilesServiceHandler) SearchFiles(context.Context, *connect.Request[daemon.SearchFilesRequest]) (*connect.Response[daemon.SearchFilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerFilesService.SearchFiles is not implemented"))
}

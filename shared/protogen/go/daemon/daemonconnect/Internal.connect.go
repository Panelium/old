// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: daemon/Internal.proto

package daemonconnect

import (
	connect "connectrpc.com/connect"
	http "net/http"
	_ "panelium/proto_gen_go/daemon"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InternalServiceName is the fully-qualified name of the InternalService service.
	InternalServiceName = "daemon.InternalService"
)

// InternalServiceClient is a client for the daemon.InternalService service.
type InternalServiceClient interface {
}

// NewInternalServiceClient constructs a client for the daemon.InternalService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInternalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InternalServiceClient {
	return &internalServiceClient{}
}

// internalServiceClient implements InternalServiceClient.
type internalServiceClient struct {
}

// InternalServiceHandler is an implementation of the daemon.InternalService service.
type InternalServiceHandler interface {
}

// NewInternalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInternalServiceHandler(svc InternalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/daemon.InternalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInternalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInternalServiceHandler struct{}

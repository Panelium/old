// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: daemon/Servers.proto

package daemonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto_gen_go "panelium/proto_gen_go"
	daemon "panelium/proto_gen_go/daemon"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServersServiceName is the fully-qualified name of the ServersService service.
	ServersServiceName = "daemon.ServersService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServersServiceCreateServerProcedure is the fully-qualified name of the ServersService's
	// CreateServer RPC.
	ServersServiceCreateServerProcedure = "/daemon.ServersService/CreateServer"
	// ServersServiceUpdateServerProcedure is the fully-qualified name of the ServersService's
	// UpdateServer RPC.
	ServersServiceUpdateServerProcedure = "/daemon.ServersService/UpdateServer"
	// ServersServiceDeleteServerProcedure is the fully-qualified name of the ServersService's
	// DeleteServer RPC.
	ServersServiceDeleteServerProcedure = "/daemon.ServersService/DeleteServer"
)

// ServersServiceClient is a client for the daemon.ServersService service.
type ServersServiceClient interface {
	CreateServer(context.Context, *connect.Request[daemon.CreateServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	UpdateServer(context.Context, *connect.Request[daemon.UpdateServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	DeleteServer(context.Context, *connect.Request[daemon.DeleteServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
}

// NewServersServiceClient constructs a client for the daemon.ServersService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServersServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServersServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serversServiceMethods := daemon.File_daemon_Servers_proto.Services().ByName("ServersService").Methods()
	return &serversServiceClient{
		createServer: connect.NewClient[daemon.CreateServerRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+ServersServiceCreateServerProcedure,
			connect.WithSchema(serversServiceMethods.ByName("CreateServer")),
			connect.WithClientOptions(opts...),
		),
		updateServer: connect.NewClient[daemon.UpdateServerRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+ServersServiceUpdateServerProcedure,
			connect.WithSchema(serversServiceMethods.ByName("UpdateServer")),
			connect.WithClientOptions(opts...),
		),
		deleteServer: connect.NewClient[daemon.DeleteServerRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+ServersServiceDeleteServerProcedure,
			connect.WithSchema(serversServiceMethods.ByName("DeleteServer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serversServiceClient implements ServersServiceClient.
type serversServiceClient struct {
	createServer *connect.Client[daemon.CreateServerRequest, proto_gen_go.SuccessMessage]
	updateServer *connect.Client[daemon.UpdateServerRequest, proto_gen_go.SuccessMessage]
	deleteServer *connect.Client[daemon.DeleteServerRequest, proto_gen_go.SuccessMessage]
}

// CreateServer calls daemon.ServersService.CreateServer.
func (c *serversServiceClient) CreateServer(ctx context.Context, req *connect.Request[daemon.CreateServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.createServer.CallUnary(ctx, req)
}

// UpdateServer calls daemon.ServersService.UpdateServer.
func (c *serversServiceClient) UpdateServer(ctx context.Context, req *connect.Request[daemon.UpdateServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.updateServer.CallUnary(ctx, req)
}

// DeleteServer calls daemon.ServersService.DeleteServer.
func (c *serversServiceClient) DeleteServer(ctx context.Context, req *connect.Request[daemon.DeleteServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.deleteServer.CallUnary(ctx, req)
}

// ServersServiceHandler is an implementation of the daemon.ServersService service.
type ServersServiceHandler interface {
	CreateServer(context.Context, *connect.Request[daemon.CreateServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	UpdateServer(context.Context, *connect.Request[daemon.UpdateServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	DeleteServer(context.Context, *connect.Request[daemon.DeleteServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
}

// NewServersServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServersServiceHandler(svc ServersServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serversServiceMethods := daemon.File_daemon_Servers_proto.Services().ByName("ServersService").Methods()
	serversServiceCreateServerHandler := connect.NewUnaryHandler(
		ServersServiceCreateServerProcedure,
		svc.CreateServer,
		connect.WithSchema(serversServiceMethods.ByName("CreateServer")),
		connect.WithHandlerOptions(opts...),
	)
	serversServiceUpdateServerHandler := connect.NewUnaryHandler(
		ServersServiceUpdateServerProcedure,
		svc.UpdateServer,
		connect.WithSchema(serversServiceMethods.ByName("UpdateServer")),
		connect.WithHandlerOptions(opts...),
	)
	serversServiceDeleteServerHandler := connect.NewUnaryHandler(
		ServersServiceDeleteServerProcedure,
		svc.DeleteServer,
		connect.WithSchema(serversServiceMethods.ByName("DeleteServer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/daemon.ServersService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServersServiceCreateServerProcedure:
			serversServiceCreateServerHandler.ServeHTTP(w, r)
		case ServersServiceUpdateServerProcedure:
			serversServiceUpdateServerHandler.ServeHTTP(w, r)
		case ServersServiceDeleteServerProcedure:
			serversServiceDeleteServerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServersServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServersServiceHandler struct{}

func (UnimplementedServersServiceHandler) CreateServer(context.Context, *connect.Request[daemon.CreateServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServersService.CreateServer is not implemented"))
}

func (UnimplementedServersServiceHandler) UpdateServer(context.Context, *connect.Request[daemon.UpdateServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServersService.UpdateServer is not implemented"))
}

func (UnimplementedServersServiceHandler) DeleteServer(context.Context, *connect.Request[daemon.DeleteServerRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServersService.DeleteServer is not implemented"))
}

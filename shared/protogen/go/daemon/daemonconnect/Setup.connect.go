// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: daemon/Setup.proto

package daemonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto_gen_go "panelium/proto_gen_go"
	daemon "panelium/proto_gen_go/daemon"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SetupServiceName is the fully-qualified name of the SetupService service.
	SetupServiceName = "daemon.SetupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SetupServiceSetupProcedure is the fully-qualified name of the SetupService's Setup RPC.
	SetupServiceSetupProcedure = "/daemon.SetupService/Setup"
)

// SetupServiceClient is a client for the daemon.SetupService service.
type SetupServiceClient interface {
	Setup(context.Context, *connect.Request[daemon.SetupRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
}

// NewSetupServiceClient constructs a client for the daemon.SetupService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSetupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SetupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	setupServiceMethods := daemon.File_daemon_Setup_proto.Services().ByName("SetupService").Methods()
	return &setupServiceClient{
		setup: connect.NewClient[daemon.SetupRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+SetupServiceSetupProcedure,
			connect.WithSchema(setupServiceMethods.ByName("Setup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// setupServiceClient implements SetupServiceClient.
type setupServiceClient struct {
	setup *connect.Client[daemon.SetupRequest, proto_gen_go.SuccessMessage]
}

// Setup calls daemon.SetupService.Setup.
func (c *setupServiceClient) Setup(ctx context.Context, req *connect.Request[daemon.SetupRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.setup.CallUnary(ctx, req)
}

// SetupServiceHandler is an implementation of the daemon.SetupService service.
type SetupServiceHandler interface {
	Setup(context.Context, *connect.Request[daemon.SetupRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
}

// NewSetupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSetupServiceHandler(svc SetupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	setupServiceMethods := daemon.File_daemon_Setup_proto.Services().ByName("SetupService").Methods()
	setupServiceSetupHandler := connect.NewUnaryHandler(
		SetupServiceSetupProcedure,
		svc.Setup,
		connect.WithSchema(setupServiceMethods.ByName("Setup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/daemon.SetupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SetupServiceSetupProcedure:
			setupServiceSetupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSetupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSetupServiceHandler struct{}

func (UnimplementedSetupServiceHandler) Setup(context.Context, *connect.Request[daemon.SetupRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.SetupService.Setup is not implemented"))
}

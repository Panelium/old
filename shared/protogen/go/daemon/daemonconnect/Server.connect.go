// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: daemon/Server.proto

package daemonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto_gen_go "panelium/proto_gen_go"
	daemon "panelium/proto_gen_go/daemon"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServerServiceName is the fully-qualified name of the ServerService service.
	ServerServiceName = "daemon.ServerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerServiceConsoleProcedure is the fully-qualified name of the ServerService's Console RPC.
	ServerServiceConsoleProcedure = "/daemon.ServerService/Console"
	// ServerServiceTerminalProcedure is the fully-qualified name of the ServerService's Terminal RPC.
	ServerServiceTerminalProcedure = "/daemon.ServerService/Terminal"
	// ServerServiceStatusProcedure is the fully-qualified name of the ServerService's Status RPC.
	ServerServiceStatusProcedure = "/daemon.ServerService/Status"
	// ServerServiceResourceUsageProcedure is the fully-qualified name of the ServerService's
	// ResourceUsage RPC.
	ServerServiceResourceUsageProcedure = "/daemon.ServerService/ResourceUsage"
	// ServerServicePowerActionProcedure is the fully-qualified name of the ServerService's PowerAction
	// RPC.
	ServerServicePowerActionProcedure = "/daemon.ServerService/PowerAction"
	// ServerServiceInstallProcedure is the fully-qualified name of the ServerService's Install RPC.
	ServerServiceInstallProcedure = "/daemon.ServerService/Install"
)

// ServerServiceClient is a client for the daemon.ServerService service.
type ServerServiceClient interface {
	Console(context.Context) *connect.BidiStreamForClient[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage]
	Terminal(context.Context) *connect.BidiStreamForClient[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage]
	Status(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[daemon.ServerStatus], error)
	ResourceUsage(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.ServerStreamForClient[daemon.ResourceUsageMessage], error)
	PowerAction(context.Context, *connect.Request[daemon.PowerActionMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	Install(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error)
}

// NewServerServiceClient constructs a client for the daemon.ServerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serverServiceMethods := daemon.File_daemon_Server_proto.Services().ByName("ServerService").Methods()
	return &serverServiceClient{
		console: connect.NewClient[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage](
			httpClient,
			baseURL+ServerServiceConsoleProcedure,
			connect.WithSchema(serverServiceMethods.ByName("Console")),
			connect.WithClientOptions(opts...),
		),
		terminal: connect.NewClient[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage](
			httpClient,
			baseURL+ServerServiceTerminalProcedure,
			connect.WithSchema(serverServiceMethods.ByName("Terminal")),
			connect.WithClientOptions(opts...),
		),
		status: connect.NewClient[proto_gen_go.SimpleIDMessage, daemon.ServerStatus](
			httpClient,
			baseURL+ServerServiceStatusProcedure,
			connect.WithSchema(serverServiceMethods.ByName("Status")),
			connect.WithClientOptions(opts...),
		),
		resourceUsage: connect.NewClient[proto_gen_go.SimpleIDMessage, daemon.ResourceUsageMessage](
			httpClient,
			baseURL+ServerServiceResourceUsageProcedure,
			connect.WithSchema(serverServiceMethods.ByName("ResourceUsage")),
			connect.WithClientOptions(opts...),
		),
		powerAction: connect.NewClient[daemon.PowerActionMessage, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+ServerServicePowerActionProcedure,
			connect.WithSchema(serverServiceMethods.ByName("PowerAction")),
			connect.WithClientOptions(opts...),
		),
		install: connect.NewClient[proto_gen_go.SimpleIDMessage, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+ServerServiceInstallProcedure,
			connect.WithSchema(serverServiceMethods.ByName("Install")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serverServiceClient implements ServerServiceClient.
type serverServiceClient struct {
	console       *connect.Client[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage]
	terminal      *connect.Client[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage]
	status        *connect.Client[proto_gen_go.SimpleIDMessage, daemon.ServerStatus]
	resourceUsage *connect.Client[proto_gen_go.SimpleIDMessage, daemon.ResourceUsageMessage]
	powerAction   *connect.Client[daemon.PowerActionMessage, proto_gen_go.SuccessMessage]
	install       *connect.Client[proto_gen_go.SimpleIDMessage, proto_gen_go.SuccessMessage]
}

// Console calls daemon.ServerService.Console.
func (c *serverServiceClient) Console(ctx context.Context) *connect.BidiStreamForClient[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage] {
	return c.console.CallBidiStream(ctx)
}

// Terminal calls daemon.ServerService.Terminal.
func (c *serverServiceClient) Terminal(ctx context.Context) *connect.BidiStreamForClient[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage] {
	return c.terminal.CallBidiStream(ctx)
}

// Status calls daemon.ServerService.Status.
func (c *serverServiceClient) Status(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[daemon.ServerStatus], error) {
	return c.status.CallUnary(ctx, req)
}

// ResourceUsage calls daemon.ServerService.ResourceUsage.
func (c *serverServiceClient) ResourceUsage(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.ServerStreamForClient[daemon.ResourceUsageMessage], error) {
	return c.resourceUsage.CallServerStream(ctx, req)
}

// PowerAction calls daemon.ServerService.PowerAction.
func (c *serverServiceClient) PowerAction(ctx context.Context, req *connect.Request[daemon.PowerActionMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.powerAction.CallUnary(ctx, req)
}

// Install calls daemon.ServerService.Install.
func (c *serverServiceClient) Install(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.install.CallUnary(ctx, req)
}

// ServerServiceHandler is an implementation of the daemon.ServerService service.
type ServerServiceHandler interface {
	Console(context.Context, *connect.BidiStream[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage]) error
	Terminal(context.Context, *connect.BidiStream[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage]) error
	Status(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[daemon.ServerStatus], error)
	ResourceUsage(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage], *connect.ServerStream[daemon.ResourceUsageMessage]) error
	PowerAction(context.Context, *connect.Request[daemon.PowerActionMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	Install(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error)
}

// NewServerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerServiceHandler(svc ServerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serverServiceMethods := daemon.File_daemon_Server_proto.Services().ByName("ServerService").Methods()
	serverServiceConsoleHandler := connect.NewBidiStreamHandler(
		ServerServiceConsoleProcedure,
		svc.Console,
		connect.WithSchema(serverServiceMethods.ByName("Console")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceTerminalHandler := connect.NewBidiStreamHandler(
		ServerServiceTerminalProcedure,
		svc.Terminal,
		connect.WithSchema(serverServiceMethods.ByName("Terminal")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceStatusHandler := connect.NewUnaryHandler(
		ServerServiceStatusProcedure,
		svc.Status,
		connect.WithSchema(serverServiceMethods.ByName("Status")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceResourceUsageHandler := connect.NewServerStreamHandler(
		ServerServiceResourceUsageProcedure,
		svc.ResourceUsage,
		connect.WithSchema(serverServiceMethods.ByName("ResourceUsage")),
		connect.WithHandlerOptions(opts...),
	)
	serverServicePowerActionHandler := connect.NewUnaryHandler(
		ServerServicePowerActionProcedure,
		svc.PowerAction,
		connect.WithSchema(serverServiceMethods.ByName("PowerAction")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceInstallHandler := connect.NewUnaryHandler(
		ServerServiceInstallProcedure,
		svc.Install,
		connect.WithSchema(serverServiceMethods.ByName("Install")),
		connect.WithHandlerOptions(opts...),
	)
	return "/daemon.ServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServerServiceConsoleProcedure:
			serverServiceConsoleHandler.ServeHTTP(w, r)
		case ServerServiceTerminalProcedure:
			serverServiceTerminalHandler.ServeHTTP(w, r)
		case ServerServiceStatusProcedure:
			serverServiceStatusHandler.ServeHTTP(w, r)
		case ServerServiceResourceUsageProcedure:
			serverServiceResourceUsageHandler.ServeHTTP(w, r)
		case ServerServicePowerActionProcedure:
			serverServicePowerActionHandler.ServeHTTP(w, r)
		case ServerServiceInstallProcedure:
			serverServiceInstallHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerServiceHandler struct{}

func (UnimplementedServerServiceHandler) Console(context.Context, *connect.BidiStream[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.Console is not implemented"))
}

func (UnimplementedServerServiceHandler) Terminal(context.Context, *connect.BidiStream[proto_gen_go.StreamIDMessage, proto_gen_go.SimpleMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.Terminal is not implemented"))
}

func (UnimplementedServerServiceHandler) Status(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[daemon.ServerStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.Status is not implemented"))
}

func (UnimplementedServerServiceHandler) ResourceUsage(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage], *connect.ServerStream[daemon.ResourceUsageMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.ResourceUsage is not implemented"))
}

func (UnimplementedServerServiceHandler) PowerAction(context.Context, *connect.Request[daemon.PowerActionMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.PowerAction is not implemented"))
}

func (UnimplementedServerServiceHandler) Install(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.Install is not implemented"))
}

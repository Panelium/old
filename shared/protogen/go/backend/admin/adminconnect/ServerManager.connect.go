// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/admin/ServerManager.proto

package adminconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	admin "panelium/proto_gen_go/backend/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServerManagerServiceName is the fully-qualified name of the ServerManagerService service.
	ServerManagerServiceName = "backend_admin.ServerManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerManagerServiceGetServersProcedure is the fully-qualified name of the ServerManagerService's
	// GetServers RPC.
	ServerManagerServiceGetServersProcedure = "/backend_admin.ServerManagerService/GetServers"
	// ServerManagerServiceGetServerProcedure is the fully-qualified name of the ServerManagerService's
	// GetServer RPC.
	ServerManagerServiceGetServerProcedure = "/backend_admin.ServerManagerService/GetServer"
	// ServerManagerServiceCreateServerProcedure is the fully-qualified name of the
	// ServerManagerService's CreateServer RPC.
	ServerManagerServiceCreateServerProcedure = "/backend_admin.ServerManagerService/CreateServer"
	// ServerManagerServiceUpdateServerProcedure is the fully-qualified name of the
	// ServerManagerService's UpdateServer RPC.
	ServerManagerServiceUpdateServerProcedure = "/backend_admin.ServerManagerService/UpdateServer"
	// ServerManagerServiceDeleteServerProcedure is the fully-qualified name of the
	// ServerManagerService's DeleteServer RPC.
	ServerManagerServiceDeleteServerProcedure = "/backend_admin.ServerManagerService/DeleteServer"
)

// ServerManagerServiceClient is a client for the backend_admin.ServerManagerService service.
type ServerManagerServiceClient interface {
	GetServers(context.Context, *connect.Request[admin.GetServersRequest]) (*connect.Response[admin.GetServersResponse], error)
	GetServer(context.Context, *connect.Request[admin.GetServerRequest]) (*connect.Response[admin.GetServerResponse], error)
	CreateServer(context.Context, *connect.Request[admin.CreateServerRequest]) (*connect.Response[admin.CreateServerResponse], error)
	UpdateServer(context.Context, *connect.Request[admin.UpdateServerRequest]) (*connect.Response[admin.UpdateServerResponse], error)
	DeleteServer(context.Context, *connect.Request[admin.DeleteServerRequest]) (*connect.Response[admin.DeleteServerResponse], error)
}

// NewServerManagerServiceClient constructs a client for the backend_admin.ServerManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServerManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serverManagerServiceMethods := admin.File_backend_admin_ServerManager_proto.Services().ByName("ServerManagerService").Methods()
	return &serverManagerServiceClient{
		getServers: connect.NewClient[admin.GetServersRequest, admin.GetServersResponse](
			httpClient,
			baseURL+ServerManagerServiceGetServersProcedure,
			connect.WithSchema(serverManagerServiceMethods.ByName("GetServers")),
			connect.WithClientOptions(opts...),
		),
		getServer: connect.NewClient[admin.GetServerRequest, admin.GetServerResponse](
			httpClient,
			baseURL+ServerManagerServiceGetServerProcedure,
			connect.WithSchema(serverManagerServiceMethods.ByName("GetServer")),
			connect.WithClientOptions(opts...),
		),
		createServer: connect.NewClient[admin.CreateServerRequest, admin.CreateServerResponse](
			httpClient,
			baseURL+ServerManagerServiceCreateServerProcedure,
			connect.WithSchema(serverManagerServiceMethods.ByName("CreateServer")),
			connect.WithClientOptions(opts...),
		),
		updateServer: connect.NewClient[admin.UpdateServerRequest, admin.UpdateServerResponse](
			httpClient,
			baseURL+ServerManagerServiceUpdateServerProcedure,
			connect.WithSchema(serverManagerServiceMethods.ByName("UpdateServer")),
			connect.WithClientOptions(opts...),
		),
		deleteServer: connect.NewClient[admin.DeleteServerRequest, admin.DeleteServerResponse](
			httpClient,
			baseURL+ServerManagerServiceDeleteServerProcedure,
			connect.WithSchema(serverManagerServiceMethods.ByName("DeleteServer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serverManagerServiceClient implements ServerManagerServiceClient.
type serverManagerServiceClient struct {
	getServers   *connect.Client[admin.GetServersRequest, admin.GetServersResponse]
	getServer    *connect.Client[admin.GetServerRequest, admin.GetServerResponse]
	createServer *connect.Client[admin.CreateServerRequest, admin.CreateServerResponse]
	updateServer *connect.Client[admin.UpdateServerRequest, admin.UpdateServerResponse]
	deleteServer *connect.Client[admin.DeleteServerRequest, admin.DeleteServerResponse]
}

// GetServers calls backend_admin.ServerManagerService.GetServers.
func (c *serverManagerServiceClient) GetServers(ctx context.Context, req *connect.Request[admin.GetServersRequest]) (*connect.Response[admin.GetServersResponse], error) {
	return c.getServers.CallUnary(ctx, req)
}

// GetServer calls backend_admin.ServerManagerService.GetServer.
func (c *serverManagerServiceClient) GetServer(ctx context.Context, req *connect.Request[admin.GetServerRequest]) (*connect.Response[admin.GetServerResponse], error) {
	return c.getServer.CallUnary(ctx, req)
}

// CreateServer calls backend_admin.ServerManagerService.CreateServer.
func (c *serverManagerServiceClient) CreateServer(ctx context.Context, req *connect.Request[admin.CreateServerRequest]) (*connect.Response[admin.CreateServerResponse], error) {
	return c.createServer.CallUnary(ctx, req)
}

// UpdateServer calls backend_admin.ServerManagerService.UpdateServer.
func (c *serverManagerServiceClient) UpdateServer(ctx context.Context, req *connect.Request[admin.UpdateServerRequest]) (*connect.Response[admin.UpdateServerResponse], error) {
	return c.updateServer.CallUnary(ctx, req)
}

// DeleteServer calls backend_admin.ServerManagerService.DeleteServer.
func (c *serverManagerServiceClient) DeleteServer(ctx context.Context, req *connect.Request[admin.DeleteServerRequest]) (*connect.Response[admin.DeleteServerResponse], error) {
	return c.deleteServer.CallUnary(ctx, req)
}

// ServerManagerServiceHandler is an implementation of the backend_admin.ServerManagerService
// service.
type ServerManagerServiceHandler interface {
	GetServers(context.Context, *connect.Request[admin.GetServersRequest]) (*connect.Response[admin.GetServersResponse], error)
	GetServer(context.Context, *connect.Request[admin.GetServerRequest]) (*connect.Response[admin.GetServerResponse], error)
	CreateServer(context.Context, *connect.Request[admin.CreateServerRequest]) (*connect.Response[admin.CreateServerResponse], error)
	UpdateServer(context.Context, *connect.Request[admin.UpdateServerRequest]) (*connect.Response[admin.UpdateServerResponse], error)
	DeleteServer(context.Context, *connect.Request[admin.DeleteServerRequest]) (*connect.Response[admin.DeleteServerResponse], error)
}

// NewServerManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerManagerServiceHandler(svc ServerManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serverManagerServiceMethods := admin.File_backend_admin_ServerManager_proto.Services().ByName("ServerManagerService").Methods()
	serverManagerServiceGetServersHandler := connect.NewUnaryHandler(
		ServerManagerServiceGetServersProcedure,
		svc.GetServers,
		connect.WithSchema(serverManagerServiceMethods.ByName("GetServers")),
		connect.WithHandlerOptions(opts...),
	)
	serverManagerServiceGetServerHandler := connect.NewUnaryHandler(
		ServerManagerServiceGetServerProcedure,
		svc.GetServer,
		connect.WithSchema(serverManagerServiceMethods.ByName("GetServer")),
		connect.WithHandlerOptions(opts...),
	)
	serverManagerServiceCreateServerHandler := connect.NewUnaryHandler(
		ServerManagerServiceCreateServerProcedure,
		svc.CreateServer,
		connect.WithSchema(serverManagerServiceMethods.ByName("CreateServer")),
		connect.WithHandlerOptions(opts...),
	)
	serverManagerServiceUpdateServerHandler := connect.NewUnaryHandler(
		ServerManagerServiceUpdateServerProcedure,
		svc.UpdateServer,
		connect.WithSchema(serverManagerServiceMethods.ByName("UpdateServer")),
		connect.WithHandlerOptions(opts...),
	)
	serverManagerServiceDeleteServerHandler := connect.NewUnaryHandler(
		ServerManagerServiceDeleteServerProcedure,
		svc.DeleteServer,
		connect.WithSchema(serverManagerServiceMethods.ByName("DeleteServer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend_admin.ServerManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServerManagerServiceGetServersProcedure:
			serverManagerServiceGetServersHandler.ServeHTTP(w, r)
		case ServerManagerServiceGetServerProcedure:
			serverManagerServiceGetServerHandler.ServeHTTP(w, r)
		case ServerManagerServiceCreateServerProcedure:
			serverManagerServiceCreateServerHandler.ServeHTTP(w, r)
		case ServerManagerServiceUpdateServerProcedure:
			serverManagerServiceUpdateServerHandler.ServeHTTP(w, r)
		case ServerManagerServiceDeleteServerProcedure:
			serverManagerServiceDeleteServerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServerManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerManagerServiceHandler struct{}

func (UnimplementedServerManagerServiceHandler) GetServers(context.Context, *connect.Request[admin.GetServersRequest]) (*connect.Response[admin.GetServersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.ServerManagerService.GetServers is not implemented"))
}

func (UnimplementedServerManagerServiceHandler) GetServer(context.Context, *connect.Request[admin.GetServerRequest]) (*connect.Response[admin.GetServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.ServerManagerService.GetServer is not implemented"))
}

func (UnimplementedServerManagerServiceHandler) CreateServer(context.Context, *connect.Request[admin.CreateServerRequest]) (*connect.Response[admin.CreateServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.ServerManagerService.CreateServer is not implemented"))
}

func (UnimplementedServerManagerServiceHandler) UpdateServer(context.Context, *connect.Request[admin.UpdateServerRequest]) (*connect.Response[admin.UpdateServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.ServerManagerService.UpdateServer is not implemented"))
}

func (UnimplementedServerManagerServiceHandler) DeleteServer(context.Context, *connect.Request[admin.DeleteServerRequest]) (*connect.Response[admin.DeleteServerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.ServerManagerService.DeleteServer is not implemented"))
}

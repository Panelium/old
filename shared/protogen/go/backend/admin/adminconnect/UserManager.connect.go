// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/admin/UserManager.proto

package adminconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	admin "panelium/proto_gen_go/backend/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserManagerServiceName is the fully-qualified name of the UserManagerService service.
	UserManagerServiceName = "backend_admin.UserManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserManagerServiceGetUsersProcedure is the fully-qualified name of the UserManagerService's
	// GetUsers RPC.
	UserManagerServiceGetUsersProcedure = "/backend_admin.UserManagerService/GetUsers"
	// UserManagerServiceGetUserProcedure is the fully-qualified name of the UserManagerService's
	// GetUser RPC.
	UserManagerServiceGetUserProcedure = "/backend_admin.UserManagerService/GetUser"
	// UserManagerServiceCreateUserProcedure is the fully-qualified name of the UserManagerService's
	// CreateUser RPC.
	UserManagerServiceCreateUserProcedure = "/backend_admin.UserManagerService/CreateUser"
	// UserManagerServiceUpdateUserProcedure is the fully-qualified name of the UserManagerService's
	// UpdateUser RPC.
	UserManagerServiceUpdateUserProcedure = "/backend_admin.UserManagerService/UpdateUser"
	// UserManagerServiceDeleteUserProcedure is the fully-qualified name of the UserManagerService's
	// DeleteUser RPC.
	UserManagerServiceDeleteUserProcedure = "/backend_admin.UserManagerService/DeleteUser"
)

// UserManagerServiceClient is a client for the backend_admin.UserManagerService service.
type UserManagerServiceClient interface {
	GetUsers(context.Context, *connect.Request[admin.GetUsersRequest]) (*connect.Response[admin.GetUsersResponse], error)
	GetUser(context.Context, *connect.Request[admin.GetUserRequest]) (*connect.Response[admin.GetUserResponse], error)
	CreateUser(context.Context, *connect.Request[admin.CreateUserRequest]) (*connect.Response[admin.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[admin.UpdateUserRequest]) (*connect.Response[admin.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[admin.DeleteUserRequest]) (*connect.Response[admin.DeleteUserResponse], error)
}

// NewUserManagerServiceClient constructs a client for the backend_admin.UserManagerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userManagerServiceMethods := admin.File_backend_admin_UserManager_proto.Services().ByName("UserManagerService").Methods()
	return &userManagerServiceClient{
		getUsers: connect.NewClient[admin.GetUsersRequest, admin.GetUsersResponse](
			httpClient,
			baseURL+UserManagerServiceGetUsersProcedure,
			connect.WithSchema(userManagerServiceMethods.ByName("GetUsers")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[admin.GetUserRequest, admin.GetUserResponse](
			httpClient,
			baseURL+UserManagerServiceGetUserProcedure,
			connect.WithSchema(userManagerServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		createUser: connect.NewClient[admin.CreateUserRequest, admin.CreateUserResponse](
			httpClient,
			baseURL+UserManagerServiceCreateUserProcedure,
			connect.WithSchema(userManagerServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[admin.UpdateUserRequest, admin.UpdateUserResponse](
			httpClient,
			baseURL+UserManagerServiceUpdateUserProcedure,
			connect.WithSchema(userManagerServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[admin.DeleteUserRequest, admin.DeleteUserResponse](
			httpClient,
			baseURL+UserManagerServiceDeleteUserProcedure,
			connect.WithSchema(userManagerServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userManagerServiceClient implements UserManagerServiceClient.
type userManagerServiceClient struct {
	getUsers   *connect.Client[admin.GetUsersRequest, admin.GetUsersResponse]
	getUser    *connect.Client[admin.GetUserRequest, admin.GetUserResponse]
	createUser *connect.Client[admin.CreateUserRequest, admin.CreateUserResponse]
	updateUser *connect.Client[admin.UpdateUserRequest, admin.UpdateUserResponse]
	deleteUser *connect.Client[admin.DeleteUserRequest, admin.DeleteUserResponse]
}

// GetUsers calls backend_admin.UserManagerService.GetUsers.
func (c *userManagerServiceClient) GetUsers(ctx context.Context, req *connect.Request[admin.GetUsersRequest]) (*connect.Response[admin.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// GetUser calls backend_admin.UserManagerService.GetUser.
func (c *userManagerServiceClient) GetUser(ctx context.Context, req *connect.Request[admin.GetUserRequest]) (*connect.Response[admin.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// CreateUser calls backend_admin.UserManagerService.CreateUser.
func (c *userManagerServiceClient) CreateUser(ctx context.Context, req *connect.Request[admin.CreateUserRequest]) (*connect.Response[admin.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls backend_admin.UserManagerService.UpdateUser.
func (c *userManagerServiceClient) UpdateUser(ctx context.Context, req *connect.Request[admin.UpdateUserRequest]) (*connect.Response[admin.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls backend_admin.UserManagerService.DeleteUser.
func (c *userManagerServiceClient) DeleteUser(ctx context.Context, req *connect.Request[admin.DeleteUserRequest]) (*connect.Response[admin.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// UserManagerServiceHandler is an implementation of the backend_admin.UserManagerService service.
type UserManagerServiceHandler interface {
	GetUsers(context.Context, *connect.Request[admin.GetUsersRequest]) (*connect.Response[admin.GetUsersResponse], error)
	GetUser(context.Context, *connect.Request[admin.GetUserRequest]) (*connect.Response[admin.GetUserResponse], error)
	CreateUser(context.Context, *connect.Request[admin.CreateUserRequest]) (*connect.Response[admin.CreateUserResponse], error)
	UpdateUser(context.Context, *connect.Request[admin.UpdateUserRequest]) (*connect.Response[admin.UpdateUserResponse], error)
	DeleteUser(context.Context, *connect.Request[admin.DeleteUserRequest]) (*connect.Response[admin.DeleteUserResponse], error)
}

// NewUserManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserManagerServiceHandler(svc UserManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userManagerServiceMethods := admin.File_backend_admin_UserManager_proto.Services().ByName("UserManagerService").Methods()
	userManagerServiceGetUsersHandler := connect.NewUnaryHandler(
		UserManagerServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(userManagerServiceMethods.ByName("GetUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userManagerServiceGetUserHandler := connect.NewUnaryHandler(
		UserManagerServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userManagerServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userManagerServiceCreateUserHandler := connect.NewUnaryHandler(
		UserManagerServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userManagerServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userManagerServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserManagerServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userManagerServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userManagerServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserManagerServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userManagerServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend_admin.UserManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserManagerServiceGetUsersProcedure:
			userManagerServiceGetUsersHandler.ServeHTTP(w, r)
		case UserManagerServiceGetUserProcedure:
			userManagerServiceGetUserHandler.ServeHTTP(w, r)
		case UserManagerServiceCreateUserProcedure:
			userManagerServiceCreateUserHandler.ServeHTTP(w, r)
		case UserManagerServiceUpdateUserProcedure:
			userManagerServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserManagerServiceDeleteUserProcedure:
			userManagerServiceDeleteUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserManagerServiceHandler struct{}

func (UnimplementedUserManagerServiceHandler) GetUsers(context.Context, *connect.Request[admin.GetUsersRequest]) (*connect.Response[admin.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.UserManagerService.GetUsers is not implemented"))
}

func (UnimplementedUserManagerServiceHandler) GetUser(context.Context, *connect.Request[admin.GetUserRequest]) (*connect.Response[admin.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.UserManagerService.GetUser is not implemented"))
}

func (UnimplementedUserManagerServiceHandler) CreateUser(context.Context, *connect.Request[admin.CreateUserRequest]) (*connect.Response[admin.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.UserManagerService.CreateUser is not implemented"))
}

func (UnimplementedUserManagerServiceHandler) UpdateUser(context.Context, *connect.Request[admin.UpdateUserRequest]) (*connect.Response[admin.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.UserManagerService.UpdateUser is not implemented"))
}

func (UnimplementedUserManagerServiceHandler) DeleteUser(context.Context, *connect.Request[admin.DeleteUserRequest]) (*connect.Response[admin.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.UserManagerService.DeleteUser is not implemented"))
}

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/admin/LocationManager.proto

package adminconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	admin "panelium/proto_gen_go/backend/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LocationManagerServiceName is the fully-qualified name of the LocationManagerService service.
	LocationManagerServiceName = "backend_admin.LocationManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LocationManagerServiceGetLocationsProcedure is the fully-qualified name of the
	// LocationManagerService's GetLocations RPC.
	LocationManagerServiceGetLocationsProcedure = "/backend_admin.LocationManagerService/GetLocations"
	// LocationManagerServiceGetLocationProcedure is the fully-qualified name of the
	// LocationManagerService's GetLocation RPC.
	LocationManagerServiceGetLocationProcedure = "/backend_admin.LocationManagerService/GetLocation"
	// LocationManagerServiceCreateLocationProcedure is the fully-qualified name of the
	// LocationManagerService's CreateLocation RPC.
	LocationManagerServiceCreateLocationProcedure = "/backend_admin.LocationManagerService/CreateLocation"
	// LocationManagerServiceUpdateLocationProcedure is the fully-qualified name of the
	// LocationManagerService's UpdateLocation RPC.
	LocationManagerServiceUpdateLocationProcedure = "/backend_admin.LocationManagerService/UpdateLocation"
	// LocationManagerServiceDeleteLocationProcedure is the fully-qualified name of the
	// LocationManagerService's DeleteLocation RPC.
	LocationManagerServiceDeleteLocationProcedure = "/backend_admin.LocationManagerService/DeleteLocation"
)

// LocationManagerServiceClient is a client for the backend_admin.LocationManagerService service.
type LocationManagerServiceClient interface {
	GetLocations(context.Context, *connect.Request[admin.GetLocationsRequest]) (*connect.Response[admin.GetLocationsResponse], error)
	GetLocation(context.Context, *connect.Request[admin.GetLocationRequest]) (*connect.Response[admin.GetLocationResponse], error)
	CreateLocation(context.Context, *connect.Request[admin.CreateLocationRequest]) (*connect.Response[admin.CreateLocationResponse], error)
	UpdateLocation(context.Context, *connect.Request[admin.UpdateLocationRequest]) (*connect.Response[admin.UpdateLocationResponse], error)
	DeleteLocation(context.Context, *connect.Request[admin.DeleteLocationRequest]) (*connect.Response[admin.DeleteLocationResponse], error)
}

// NewLocationManagerServiceClient constructs a client for the backend_admin.LocationManagerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLocationManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LocationManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	locationManagerServiceMethods := admin.File_backend_admin_LocationManager_proto.Services().ByName("LocationManagerService").Methods()
	return &locationManagerServiceClient{
		getLocations: connect.NewClient[admin.GetLocationsRequest, admin.GetLocationsResponse](
			httpClient,
			baseURL+LocationManagerServiceGetLocationsProcedure,
			connect.WithSchema(locationManagerServiceMethods.ByName("GetLocations")),
			connect.WithClientOptions(opts...),
		),
		getLocation: connect.NewClient[admin.GetLocationRequest, admin.GetLocationResponse](
			httpClient,
			baseURL+LocationManagerServiceGetLocationProcedure,
			connect.WithSchema(locationManagerServiceMethods.ByName("GetLocation")),
			connect.WithClientOptions(opts...),
		),
		createLocation: connect.NewClient[admin.CreateLocationRequest, admin.CreateLocationResponse](
			httpClient,
			baseURL+LocationManagerServiceCreateLocationProcedure,
			connect.WithSchema(locationManagerServiceMethods.ByName("CreateLocation")),
			connect.WithClientOptions(opts...),
		),
		updateLocation: connect.NewClient[admin.UpdateLocationRequest, admin.UpdateLocationResponse](
			httpClient,
			baseURL+LocationManagerServiceUpdateLocationProcedure,
			connect.WithSchema(locationManagerServiceMethods.ByName("UpdateLocation")),
			connect.WithClientOptions(opts...),
		),
		deleteLocation: connect.NewClient[admin.DeleteLocationRequest, admin.DeleteLocationResponse](
			httpClient,
			baseURL+LocationManagerServiceDeleteLocationProcedure,
			connect.WithSchema(locationManagerServiceMethods.ByName("DeleteLocation")),
			connect.WithClientOptions(opts...),
		),
	}
}

// locationManagerServiceClient implements LocationManagerServiceClient.
type locationManagerServiceClient struct {
	getLocations   *connect.Client[admin.GetLocationsRequest, admin.GetLocationsResponse]
	getLocation    *connect.Client[admin.GetLocationRequest, admin.GetLocationResponse]
	createLocation *connect.Client[admin.CreateLocationRequest, admin.CreateLocationResponse]
	updateLocation *connect.Client[admin.UpdateLocationRequest, admin.UpdateLocationResponse]
	deleteLocation *connect.Client[admin.DeleteLocationRequest, admin.DeleteLocationResponse]
}

// GetLocations calls backend_admin.LocationManagerService.GetLocations.
func (c *locationManagerServiceClient) GetLocations(ctx context.Context, req *connect.Request[admin.GetLocationsRequest]) (*connect.Response[admin.GetLocationsResponse], error) {
	return c.getLocations.CallUnary(ctx, req)
}

// GetLocation calls backend_admin.LocationManagerService.GetLocation.
func (c *locationManagerServiceClient) GetLocation(ctx context.Context, req *connect.Request[admin.GetLocationRequest]) (*connect.Response[admin.GetLocationResponse], error) {
	return c.getLocation.CallUnary(ctx, req)
}

// CreateLocation calls backend_admin.LocationManagerService.CreateLocation.
func (c *locationManagerServiceClient) CreateLocation(ctx context.Context, req *connect.Request[admin.CreateLocationRequest]) (*connect.Response[admin.CreateLocationResponse], error) {
	return c.createLocation.CallUnary(ctx, req)
}

// UpdateLocation calls backend_admin.LocationManagerService.UpdateLocation.
func (c *locationManagerServiceClient) UpdateLocation(ctx context.Context, req *connect.Request[admin.UpdateLocationRequest]) (*connect.Response[admin.UpdateLocationResponse], error) {
	return c.updateLocation.CallUnary(ctx, req)
}

// DeleteLocation calls backend_admin.LocationManagerService.DeleteLocation.
func (c *locationManagerServiceClient) DeleteLocation(ctx context.Context, req *connect.Request[admin.DeleteLocationRequest]) (*connect.Response[admin.DeleteLocationResponse], error) {
	return c.deleteLocation.CallUnary(ctx, req)
}

// LocationManagerServiceHandler is an implementation of the backend_admin.LocationManagerService
// service.
type LocationManagerServiceHandler interface {
	GetLocations(context.Context, *connect.Request[admin.GetLocationsRequest]) (*connect.Response[admin.GetLocationsResponse], error)
	GetLocation(context.Context, *connect.Request[admin.GetLocationRequest]) (*connect.Response[admin.GetLocationResponse], error)
	CreateLocation(context.Context, *connect.Request[admin.CreateLocationRequest]) (*connect.Response[admin.CreateLocationResponse], error)
	UpdateLocation(context.Context, *connect.Request[admin.UpdateLocationRequest]) (*connect.Response[admin.UpdateLocationResponse], error)
	DeleteLocation(context.Context, *connect.Request[admin.DeleteLocationRequest]) (*connect.Response[admin.DeleteLocationResponse], error)
}

// NewLocationManagerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLocationManagerServiceHandler(svc LocationManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	locationManagerServiceMethods := admin.File_backend_admin_LocationManager_proto.Services().ByName("LocationManagerService").Methods()
	locationManagerServiceGetLocationsHandler := connect.NewUnaryHandler(
		LocationManagerServiceGetLocationsProcedure,
		svc.GetLocations,
		connect.WithSchema(locationManagerServiceMethods.ByName("GetLocations")),
		connect.WithHandlerOptions(opts...),
	)
	locationManagerServiceGetLocationHandler := connect.NewUnaryHandler(
		LocationManagerServiceGetLocationProcedure,
		svc.GetLocation,
		connect.WithSchema(locationManagerServiceMethods.ByName("GetLocation")),
		connect.WithHandlerOptions(opts...),
	)
	locationManagerServiceCreateLocationHandler := connect.NewUnaryHandler(
		LocationManagerServiceCreateLocationProcedure,
		svc.CreateLocation,
		connect.WithSchema(locationManagerServiceMethods.ByName("CreateLocation")),
		connect.WithHandlerOptions(opts...),
	)
	locationManagerServiceUpdateLocationHandler := connect.NewUnaryHandler(
		LocationManagerServiceUpdateLocationProcedure,
		svc.UpdateLocation,
		connect.WithSchema(locationManagerServiceMethods.ByName("UpdateLocation")),
		connect.WithHandlerOptions(opts...),
	)
	locationManagerServiceDeleteLocationHandler := connect.NewUnaryHandler(
		LocationManagerServiceDeleteLocationProcedure,
		svc.DeleteLocation,
		connect.WithSchema(locationManagerServiceMethods.ByName("DeleteLocation")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend_admin.LocationManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LocationManagerServiceGetLocationsProcedure:
			locationManagerServiceGetLocationsHandler.ServeHTTP(w, r)
		case LocationManagerServiceGetLocationProcedure:
			locationManagerServiceGetLocationHandler.ServeHTTP(w, r)
		case LocationManagerServiceCreateLocationProcedure:
			locationManagerServiceCreateLocationHandler.ServeHTTP(w, r)
		case LocationManagerServiceUpdateLocationProcedure:
			locationManagerServiceUpdateLocationHandler.ServeHTTP(w, r)
		case LocationManagerServiceDeleteLocationProcedure:
			locationManagerServiceDeleteLocationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLocationManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLocationManagerServiceHandler struct{}

func (UnimplementedLocationManagerServiceHandler) GetLocations(context.Context, *connect.Request[admin.GetLocationsRequest]) (*connect.Response[admin.GetLocationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.LocationManagerService.GetLocations is not implemented"))
}

func (UnimplementedLocationManagerServiceHandler) GetLocation(context.Context, *connect.Request[admin.GetLocationRequest]) (*connect.Response[admin.GetLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.LocationManagerService.GetLocation is not implemented"))
}

func (UnimplementedLocationManagerServiceHandler) CreateLocation(context.Context, *connect.Request[admin.CreateLocationRequest]) (*connect.Response[admin.CreateLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.LocationManagerService.CreateLocation is not implemented"))
}

func (UnimplementedLocationManagerServiceHandler) UpdateLocation(context.Context, *connect.Request[admin.UpdateLocationRequest]) (*connect.Response[admin.UpdateLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.LocationManagerService.UpdateLocation is not implemented"))
}

func (UnimplementedLocationManagerServiceHandler) DeleteLocation(context.Context, *connect.Request[admin.DeleteLocationRequest]) (*connect.Response[admin.DeleteLocationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.LocationManagerService.DeleteLocation is not implemented"))
}

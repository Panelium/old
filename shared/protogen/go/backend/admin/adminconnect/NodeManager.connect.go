// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/admin/NodeManager.proto

package adminconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	admin "panelium/proto_gen_go/backend/admin"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NodeManagerServiceName is the fully-qualified name of the NodeManagerService service.
	NodeManagerServiceName = "backend_admin.NodeManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NodeManagerServiceGetNodesProcedure is the fully-qualified name of the NodeManagerService's
	// GetNodes RPC.
	NodeManagerServiceGetNodesProcedure = "/backend_admin.NodeManagerService/GetNodes"
	// NodeManagerServiceGetNodeProcedure is the fully-qualified name of the NodeManagerService's
	// GetNode RPC.
	NodeManagerServiceGetNodeProcedure = "/backend_admin.NodeManagerService/GetNode"
	// NodeManagerServiceCreateNodeProcedure is the fully-qualified name of the NodeManagerService's
	// CreateNode RPC.
	NodeManagerServiceCreateNodeProcedure = "/backend_admin.NodeManagerService/CreateNode"
	// NodeManagerServiceUpdateNodeProcedure is the fully-qualified name of the NodeManagerService's
	// UpdateNode RPC.
	NodeManagerServiceUpdateNodeProcedure = "/backend_admin.NodeManagerService/UpdateNode"
	// NodeManagerServiceDeleteNodeProcedure is the fully-qualified name of the NodeManagerService's
	// DeleteNode RPC.
	NodeManagerServiceDeleteNodeProcedure = "/backend_admin.NodeManagerService/DeleteNode"
)

// NodeManagerServiceClient is a client for the backend_admin.NodeManagerService service.
type NodeManagerServiceClient interface {
	GetNodes(context.Context, *connect.Request[admin.GetNodesRequest]) (*connect.Response[admin.GetNodesResponse], error)
	GetNode(context.Context, *connect.Request[admin.GetNodeRequest]) (*connect.Response[admin.GetNodeResponse], error)
	CreateNode(context.Context, *connect.Request[admin.CreateNodeRequest]) (*connect.Response[admin.CreateNodeResponse], error)
	UpdateNode(context.Context, *connect.Request[admin.UpdateNodeRequest]) (*connect.Response[admin.UpdateNodeResponse], error)
	DeleteNode(context.Context, *connect.Request[admin.DeleteNodeRequest]) (*connect.Response[admin.DeleteNodeResponse], error)
}

// NewNodeManagerServiceClient constructs a client for the backend_admin.NodeManagerService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNodeManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NodeManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	nodeManagerServiceMethods := admin.File_backend_admin_NodeManager_proto.Services().ByName("NodeManagerService").Methods()
	return &nodeManagerServiceClient{
		getNodes: connect.NewClient[admin.GetNodesRequest, admin.GetNodesResponse](
			httpClient,
			baseURL+NodeManagerServiceGetNodesProcedure,
			connect.WithSchema(nodeManagerServiceMethods.ByName("GetNodes")),
			connect.WithClientOptions(opts...),
		),
		getNode: connect.NewClient[admin.GetNodeRequest, admin.GetNodeResponse](
			httpClient,
			baseURL+NodeManagerServiceGetNodeProcedure,
			connect.WithSchema(nodeManagerServiceMethods.ByName("GetNode")),
			connect.WithClientOptions(opts...),
		),
		createNode: connect.NewClient[admin.CreateNodeRequest, admin.CreateNodeResponse](
			httpClient,
			baseURL+NodeManagerServiceCreateNodeProcedure,
			connect.WithSchema(nodeManagerServiceMethods.ByName("CreateNode")),
			connect.WithClientOptions(opts...),
		),
		updateNode: connect.NewClient[admin.UpdateNodeRequest, admin.UpdateNodeResponse](
			httpClient,
			baseURL+NodeManagerServiceUpdateNodeProcedure,
			connect.WithSchema(nodeManagerServiceMethods.ByName("UpdateNode")),
			connect.WithClientOptions(opts...),
		),
		deleteNode: connect.NewClient[admin.DeleteNodeRequest, admin.DeleteNodeResponse](
			httpClient,
			baseURL+NodeManagerServiceDeleteNodeProcedure,
			connect.WithSchema(nodeManagerServiceMethods.ByName("DeleteNode")),
			connect.WithClientOptions(opts...),
		),
	}
}

// nodeManagerServiceClient implements NodeManagerServiceClient.
type nodeManagerServiceClient struct {
	getNodes   *connect.Client[admin.GetNodesRequest, admin.GetNodesResponse]
	getNode    *connect.Client[admin.GetNodeRequest, admin.GetNodeResponse]
	createNode *connect.Client[admin.CreateNodeRequest, admin.CreateNodeResponse]
	updateNode *connect.Client[admin.UpdateNodeRequest, admin.UpdateNodeResponse]
	deleteNode *connect.Client[admin.DeleteNodeRequest, admin.DeleteNodeResponse]
}

// GetNodes calls backend_admin.NodeManagerService.GetNodes.
func (c *nodeManagerServiceClient) GetNodes(ctx context.Context, req *connect.Request[admin.GetNodesRequest]) (*connect.Response[admin.GetNodesResponse], error) {
	return c.getNodes.CallUnary(ctx, req)
}

// GetNode calls backend_admin.NodeManagerService.GetNode.
func (c *nodeManagerServiceClient) GetNode(ctx context.Context, req *connect.Request[admin.GetNodeRequest]) (*connect.Response[admin.GetNodeResponse], error) {
	return c.getNode.CallUnary(ctx, req)
}

// CreateNode calls backend_admin.NodeManagerService.CreateNode.
func (c *nodeManagerServiceClient) CreateNode(ctx context.Context, req *connect.Request[admin.CreateNodeRequest]) (*connect.Response[admin.CreateNodeResponse], error) {
	return c.createNode.CallUnary(ctx, req)
}

// UpdateNode calls backend_admin.NodeManagerService.UpdateNode.
func (c *nodeManagerServiceClient) UpdateNode(ctx context.Context, req *connect.Request[admin.UpdateNodeRequest]) (*connect.Response[admin.UpdateNodeResponse], error) {
	return c.updateNode.CallUnary(ctx, req)
}

// DeleteNode calls backend_admin.NodeManagerService.DeleteNode.
func (c *nodeManagerServiceClient) DeleteNode(ctx context.Context, req *connect.Request[admin.DeleteNodeRequest]) (*connect.Response[admin.DeleteNodeResponse], error) {
	return c.deleteNode.CallUnary(ctx, req)
}

// NodeManagerServiceHandler is an implementation of the backend_admin.NodeManagerService service.
type NodeManagerServiceHandler interface {
	GetNodes(context.Context, *connect.Request[admin.GetNodesRequest]) (*connect.Response[admin.GetNodesResponse], error)
	GetNode(context.Context, *connect.Request[admin.GetNodeRequest]) (*connect.Response[admin.GetNodeResponse], error)
	CreateNode(context.Context, *connect.Request[admin.CreateNodeRequest]) (*connect.Response[admin.CreateNodeResponse], error)
	UpdateNode(context.Context, *connect.Request[admin.UpdateNodeRequest]) (*connect.Response[admin.UpdateNodeResponse], error)
	DeleteNode(context.Context, *connect.Request[admin.DeleteNodeRequest]) (*connect.Response[admin.DeleteNodeResponse], error)
}

// NewNodeManagerServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNodeManagerServiceHandler(svc NodeManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	nodeManagerServiceMethods := admin.File_backend_admin_NodeManager_proto.Services().ByName("NodeManagerService").Methods()
	nodeManagerServiceGetNodesHandler := connect.NewUnaryHandler(
		NodeManagerServiceGetNodesProcedure,
		svc.GetNodes,
		connect.WithSchema(nodeManagerServiceMethods.ByName("GetNodes")),
		connect.WithHandlerOptions(opts...),
	)
	nodeManagerServiceGetNodeHandler := connect.NewUnaryHandler(
		NodeManagerServiceGetNodeProcedure,
		svc.GetNode,
		connect.WithSchema(nodeManagerServiceMethods.ByName("GetNode")),
		connect.WithHandlerOptions(opts...),
	)
	nodeManagerServiceCreateNodeHandler := connect.NewUnaryHandler(
		NodeManagerServiceCreateNodeProcedure,
		svc.CreateNode,
		connect.WithSchema(nodeManagerServiceMethods.ByName("CreateNode")),
		connect.WithHandlerOptions(opts...),
	)
	nodeManagerServiceUpdateNodeHandler := connect.NewUnaryHandler(
		NodeManagerServiceUpdateNodeProcedure,
		svc.UpdateNode,
		connect.WithSchema(nodeManagerServiceMethods.ByName("UpdateNode")),
		connect.WithHandlerOptions(opts...),
	)
	nodeManagerServiceDeleteNodeHandler := connect.NewUnaryHandler(
		NodeManagerServiceDeleteNodeProcedure,
		svc.DeleteNode,
		connect.WithSchema(nodeManagerServiceMethods.ByName("DeleteNode")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend_admin.NodeManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NodeManagerServiceGetNodesProcedure:
			nodeManagerServiceGetNodesHandler.ServeHTTP(w, r)
		case NodeManagerServiceGetNodeProcedure:
			nodeManagerServiceGetNodeHandler.ServeHTTP(w, r)
		case NodeManagerServiceCreateNodeProcedure:
			nodeManagerServiceCreateNodeHandler.ServeHTTP(w, r)
		case NodeManagerServiceUpdateNodeProcedure:
			nodeManagerServiceUpdateNodeHandler.ServeHTTP(w, r)
		case NodeManagerServiceDeleteNodeProcedure:
			nodeManagerServiceDeleteNodeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNodeManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNodeManagerServiceHandler struct{}

func (UnimplementedNodeManagerServiceHandler) GetNodes(context.Context, *connect.Request[admin.GetNodesRequest]) (*connect.Response[admin.GetNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.NodeManagerService.GetNodes is not implemented"))
}

func (UnimplementedNodeManagerServiceHandler) GetNode(context.Context, *connect.Request[admin.GetNodeRequest]) (*connect.Response[admin.GetNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.NodeManagerService.GetNode is not implemented"))
}

func (UnimplementedNodeManagerServiceHandler) CreateNode(context.Context, *connect.Request[admin.CreateNodeRequest]) (*connect.Response[admin.CreateNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.NodeManagerService.CreateNode is not implemented"))
}

func (UnimplementedNodeManagerServiceHandler) UpdateNode(context.Context, *connect.Request[admin.UpdateNodeRequest]) (*connect.Response[admin.UpdateNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.NodeManagerService.UpdateNode is not implemented"))
}

func (UnimplementedNodeManagerServiceHandler) DeleteNode(context.Context, *connect.Request[admin.DeleteNodeRequest]) (*connect.Response[admin.DeleteNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend_admin.NodeManagerService.DeleteNode is not implemented"))
}

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/Client.proto

package backendconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto_gen_go "panelium/proto_gen_go"
	backend "panelium/proto_gen_go/backend"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ClientServiceName is the fully-qualified name of the ClientService service.
	ClientServiceName = "backend.ClientService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ClientServiceGetInfoProcedure is the fully-qualified name of the ClientService's GetInfo RPC.
	ClientServiceGetInfoProcedure = "/backend.ClientService/GetInfo"
	// ClientServiceGetServerListProcedure is the fully-qualified name of the ClientService's
	// GetServerList RPC.
	ClientServiceGetServerListProcedure = "/backend.ClientService/GetServerList"
)

// ClientServiceClient is a client for the backend.ClientService service.
type ClientServiceClient interface {
	GetInfo(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.ClientInfo], error)
	GetServerList(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.ServerList], error)
}

// NewClientServiceClient constructs a client for the backend.ClientService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewClientServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ClientServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	clientServiceMethods := backend.File_backend_Client_proto.Services().ByName("ClientService").Methods()
	return &clientServiceClient{
		getInfo: connect.NewClient[proto_gen_go.Empty, backend.ClientInfo](
			httpClient,
			baseURL+ClientServiceGetInfoProcedure,
			connect.WithSchema(clientServiceMethods.ByName("GetInfo")),
			connect.WithClientOptions(opts...),
		),
		getServerList: connect.NewClient[proto_gen_go.Empty, backend.ServerList](
			httpClient,
			baseURL+ClientServiceGetServerListProcedure,
			connect.WithSchema(clientServiceMethods.ByName("GetServerList")),
			connect.WithClientOptions(opts...),
		),
	}
}

// clientServiceClient implements ClientServiceClient.
type clientServiceClient struct {
	getInfo       *connect.Client[proto_gen_go.Empty, backend.ClientInfo]
	getServerList *connect.Client[proto_gen_go.Empty, backend.ServerList]
}

// GetInfo calls backend.ClientService.GetInfo.
func (c *clientServiceClient) GetInfo(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.ClientInfo], error) {
	return c.getInfo.CallUnary(ctx, req)
}

// GetServerList calls backend.ClientService.GetServerList.
func (c *clientServiceClient) GetServerList(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.ServerList], error) {
	return c.getServerList.CallUnary(ctx, req)
}

// ClientServiceHandler is an implementation of the backend.ClientService service.
type ClientServiceHandler interface {
	GetInfo(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.ClientInfo], error)
	GetServerList(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.ServerList], error)
}

// NewClientServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewClientServiceHandler(svc ClientServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	clientServiceMethods := backend.File_backend_Client_proto.Services().ByName("ClientService").Methods()
	clientServiceGetInfoHandler := connect.NewUnaryHandler(
		ClientServiceGetInfoProcedure,
		svc.GetInfo,
		connect.WithSchema(clientServiceMethods.ByName("GetInfo")),
		connect.WithHandlerOptions(opts...),
	)
	clientServiceGetServerListHandler := connect.NewUnaryHandler(
		ClientServiceGetServerListProcedure,
		svc.GetServerList,
		connect.WithSchema(clientServiceMethods.ByName("GetServerList")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.ClientService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ClientServiceGetInfoProcedure:
			clientServiceGetInfoHandler.ServeHTTP(w, r)
		case ClientServiceGetServerListProcedure:
			clientServiceGetServerListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedClientServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedClientServiceHandler struct{}

func (UnimplementedClientServiceHandler) GetInfo(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.ClientInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.ClientService.GetInfo is not implemented"))
}

func (UnimplementedClientServiceHandler) GetServerList(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.ServerList], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.ClientService.GetServerList is not implemented"))
}

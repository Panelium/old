// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/User.proto

package backendconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto_gen_go "panelium/proto_gen_go"
	backend "panelium/proto_gen_go/backend"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "backend.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/backend.UserService/CreateUser"
	// UserServiceReadUserProcedure is the fully-qualified name of the UserService's ReadUser RPC.
	UserServiceReadUserProcedure = "/backend.UserService/ReadUser"
	// UserServiceReadUserByUsernameProcedure is the fully-qualified name of the UserService's
	// ReadUserByUsername RPC.
	UserServiceReadUserByUsernameProcedure = "/backend.UserService/ReadUserByUsername"
	// UserServiceReadUserByEmailProcedure is the fully-qualified name of the UserService's
	// ReadUserByEmail RPC.
	UserServiceReadUserByEmailProcedure = "/backend.UserService/ReadUserByEmail"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/backend.UserService/UpdateUser"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/backend.UserService/DeleteUser"
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/backend.UserService/ListUsers"
)

// UserServiceClient is a client for the backend.UserService service.
type UserServiceClient interface {
	CreateUser(context.Context, *connect.Request[backend.UserData]) (*connect.Response[backend.User], error)
	ReadUser(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.User], error)
	ReadUserByUsername(context.Context, *connect.Request[proto_gen_go.SimpleMessage]) (*connect.Response[backend.User], error)
	ReadUserByEmail(context.Context, *connect.Request[proto_gen_go.SimpleMessage]) (*connect.Response[backend.User], error)
	UpdateUser(context.Context, *connect.Request[backend.User]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	DeleteUser(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	ListUsers(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.Users], error)
}

// NewUserServiceClient constructs a client for the backend.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := backend.File_backend_User_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		createUser: connect.NewClient[backend.UserData, backend.User](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		readUser: connect.NewClient[proto_gen_go.SimpleIDMessage, backend.User](
			httpClient,
			baseURL+UserServiceReadUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("ReadUser")),
			connect.WithClientOptions(opts...),
		),
		readUserByUsername: connect.NewClient[proto_gen_go.SimpleMessage, backend.User](
			httpClient,
			baseURL+UserServiceReadUserByUsernameProcedure,
			connect.WithSchema(userServiceMethods.ByName("ReadUserByUsername")),
			connect.WithClientOptions(opts...),
		),
		readUserByEmail: connect.NewClient[proto_gen_go.SimpleMessage, backend.User](
			httpClient,
			baseURL+UserServiceReadUserByEmailProcedure,
			connect.WithSchema(userServiceMethods.ByName("ReadUserByEmail")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[backend.User, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[proto_gen_go.SimpleIDMessage, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[proto_gen_go.Empty, backend.Users](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser         *connect.Client[backend.UserData, backend.User]
	readUser           *connect.Client[proto_gen_go.SimpleIDMessage, backend.User]
	readUserByUsername *connect.Client[proto_gen_go.SimpleMessage, backend.User]
	readUserByEmail    *connect.Client[proto_gen_go.SimpleMessage, backend.User]
	updateUser         *connect.Client[backend.User, proto_gen_go.SuccessMessage]
	deleteUser         *connect.Client[proto_gen_go.SimpleIDMessage, proto_gen_go.SuccessMessage]
	listUsers          *connect.Client[proto_gen_go.Empty, backend.Users]
}

// CreateUser calls backend.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[backend.UserData]) (*connect.Response[backend.User], error) {
	return c.createUser.CallUnary(ctx, req)
}

// ReadUser calls backend.UserService.ReadUser.
func (c *userServiceClient) ReadUser(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.User], error) {
	return c.readUser.CallUnary(ctx, req)
}

// ReadUserByUsername calls backend.UserService.ReadUserByUsername.
func (c *userServiceClient) ReadUserByUsername(ctx context.Context, req *connect.Request[proto_gen_go.SimpleMessage]) (*connect.Response[backend.User], error) {
	return c.readUserByUsername.CallUnary(ctx, req)
}

// ReadUserByEmail calls backend.UserService.ReadUserByEmail.
func (c *userServiceClient) ReadUserByEmail(ctx context.Context, req *connect.Request[proto_gen_go.SimpleMessage]) (*connect.Response[backend.User], error) {
	return c.readUserByEmail.CallUnary(ctx, req)
}

// UpdateUser calls backend.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[backend.User]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// DeleteUser calls backend.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// ListUsers calls backend.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.Users], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the backend.UserService service.
type UserServiceHandler interface {
	CreateUser(context.Context, *connect.Request[backend.UserData]) (*connect.Response[backend.User], error)
	ReadUser(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.User], error)
	ReadUserByUsername(context.Context, *connect.Request[proto_gen_go.SimpleMessage]) (*connect.Response[backend.User], error)
	ReadUserByEmail(context.Context, *connect.Request[proto_gen_go.SimpleMessage]) (*connect.Response[backend.User], error)
	UpdateUser(context.Context, *connect.Request[backend.User]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	DeleteUser(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	ListUsers(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.Users], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := backend.File_backend_User_proto.Services().ByName("UserService").Methods()
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceReadUserHandler := connect.NewUnaryHandler(
		UserServiceReadUserProcedure,
		svc.ReadUser,
		connect.WithSchema(userServiceMethods.ByName("ReadUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceReadUserByUsernameHandler := connect.NewUnaryHandler(
		UserServiceReadUserByUsernameProcedure,
		svc.ReadUserByUsername,
		connect.WithSchema(userServiceMethods.ByName("ReadUserByUsername")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceReadUserByEmailHandler := connect.NewUnaryHandler(
		UserServiceReadUserByEmailProcedure,
		svc.ReadUserByEmail,
		connect.WithSchema(userServiceMethods.ByName("ReadUserByEmail")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceReadUserProcedure:
			userServiceReadUserHandler.ServeHTTP(w, r)
		case UserServiceReadUserByUsernameProcedure:
			userServiceReadUserByUsernameHandler.ServeHTTP(w, r)
		case UserServiceReadUserByEmailProcedure:
			userServiceReadUserByEmailHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[backend.UserData]) (*connect.Response[backend.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ReadUser(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.UserService.ReadUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ReadUserByUsername(context.Context, *connect.Request[proto_gen_go.SimpleMessage]) (*connect.Response[backend.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.UserService.ReadUserByUsername is not implemented"))
}

func (UnimplementedUserServiceHandler) ReadUserByEmail(context.Context, *connect.Request[proto_gen_go.SimpleMessage]) (*connect.Response[backend.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.UserService.ReadUserByEmail is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[backend.User]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.Response[backend.Users], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.UserService.ListUsers is not implemented"))
}

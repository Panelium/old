// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/Daemon.proto

package backendconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto_gen_go "panelium/proto_gen_go"
	backend "panelium/proto_gen_go/backend"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DaemonServiceName is the fully-qualified name of the DaemonService service.
	DaemonServiceName = "backend.DaemonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DaemonServiceRegisterDaemonProcedure is the fully-qualified name of the DaemonService's
	// RegisterDaemon RPC.
	DaemonServiceRegisterDaemonProcedure = "/backend.DaemonService/RegisterDaemon"
	// DaemonServiceSyncBlueprintsProcedure is the fully-qualified name of the DaemonService's
	// SyncBlueprints RPC.
	DaemonServiceSyncBlueprintsProcedure = "/backend.DaemonService/SyncBlueprints"
	// DaemonServiceGetBlueprintProcedure is the fully-qualified name of the DaemonService's
	// GetBlueprint RPC.
	DaemonServiceGetBlueprintProcedure = "/backend.DaemonService/GetBlueprint"
	// DaemonServiceSyncServersProcedure is the fully-qualified name of the DaemonService's SyncServers
	// RPC.
	DaemonServiceSyncServersProcedure = "/backend.DaemonService/SyncServers"
	// DaemonServiceGetServerProcedure is the fully-qualified name of the DaemonService's GetServer RPC.
	DaemonServiceGetServerProcedure = "/backend.DaemonService/GetServer"
)

// DaemonServiceClient is a client for the backend.DaemonService service.
type DaemonServiceClient interface {
	RegisterDaemon(context.Context, *connect.Request[backend.RegisterDaemonRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	SyncBlueprints(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.ServerStreamForClient[backend.Blueprint], error)
	GetBlueprint(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Blueprint], error)
	SyncServers(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.ServerStreamForClient[backend.Server], error)
	GetServer(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Server], error)
}

// NewDaemonServiceClient constructs a client for the backend.DaemonService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDaemonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DaemonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	daemonServiceMethods := backend.File_backend_Daemon_proto.Services().ByName("DaemonService").Methods()
	return &daemonServiceClient{
		registerDaemon: connect.NewClient[backend.RegisterDaemonRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+DaemonServiceRegisterDaemonProcedure,
			connect.WithSchema(daemonServiceMethods.ByName("RegisterDaemon")),
			connect.WithClientOptions(opts...),
		),
		syncBlueprints: connect.NewClient[proto_gen_go.Empty, backend.Blueprint](
			httpClient,
			baseURL+DaemonServiceSyncBlueprintsProcedure,
			connect.WithSchema(daemonServiceMethods.ByName("SyncBlueprints")),
			connect.WithClientOptions(opts...),
		),
		getBlueprint: connect.NewClient[proto_gen_go.SimpleIDMessage, backend.Blueprint](
			httpClient,
			baseURL+DaemonServiceGetBlueprintProcedure,
			connect.WithSchema(daemonServiceMethods.ByName("GetBlueprint")),
			connect.WithClientOptions(opts...),
		),
		syncServers: connect.NewClient[proto_gen_go.Empty, backend.Server](
			httpClient,
			baseURL+DaemonServiceSyncServersProcedure,
			connect.WithSchema(daemonServiceMethods.ByName("SyncServers")),
			connect.WithClientOptions(opts...),
		),
		getServer: connect.NewClient[proto_gen_go.SimpleIDMessage, backend.Server](
			httpClient,
			baseURL+DaemonServiceGetServerProcedure,
			connect.WithSchema(daemonServiceMethods.ByName("GetServer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// daemonServiceClient implements DaemonServiceClient.
type daemonServiceClient struct {
	registerDaemon *connect.Client[backend.RegisterDaemonRequest, proto_gen_go.SuccessMessage]
	syncBlueprints *connect.Client[proto_gen_go.Empty, backend.Blueprint]
	getBlueprint   *connect.Client[proto_gen_go.SimpleIDMessage, backend.Blueprint]
	syncServers    *connect.Client[proto_gen_go.Empty, backend.Server]
	getServer      *connect.Client[proto_gen_go.SimpleIDMessage, backend.Server]
}

// RegisterDaemon calls backend.DaemonService.RegisterDaemon.
func (c *daemonServiceClient) RegisterDaemon(ctx context.Context, req *connect.Request[backend.RegisterDaemonRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.registerDaemon.CallUnary(ctx, req)
}

// SyncBlueprints calls backend.DaemonService.SyncBlueprints.
func (c *daemonServiceClient) SyncBlueprints(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.ServerStreamForClient[backend.Blueprint], error) {
	return c.syncBlueprints.CallServerStream(ctx, req)
}

// GetBlueprint calls backend.DaemonService.GetBlueprint.
func (c *daemonServiceClient) GetBlueprint(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Blueprint], error) {
	return c.getBlueprint.CallUnary(ctx, req)
}

// SyncServers calls backend.DaemonService.SyncServers.
func (c *daemonServiceClient) SyncServers(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.ServerStreamForClient[backend.Server], error) {
	return c.syncServers.CallServerStream(ctx, req)
}

// GetServer calls backend.DaemonService.GetServer.
func (c *daemonServiceClient) GetServer(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Server], error) {
	return c.getServer.CallUnary(ctx, req)
}

// DaemonServiceHandler is an implementation of the backend.DaemonService service.
type DaemonServiceHandler interface {
	RegisterDaemon(context.Context, *connect.Request[backend.RegisterDaemonRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	SyncBlueprints(context.Context, *connect.Request[proto_gen_go.Empty], *connect.ServerStream[backend.Blueprint]) error
	GetBlueprint(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Blueprint], error)
	SyncServers(context.Context, *connect.Request[proto_gen_go.Empty], *connect.ServerStream[backend.Server]) error
	GetServer(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Server], error)
}

// NewDaemonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDaemonServiceHandler(svc DaemonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	daemonServiceMethods := backend.File_backend_Daemon_proto.Services().ByName("DaemonService").Methods()
	daemonServiceRegisterDaemonHandler := connect.NewUnaryHandler(
		DaemonServiceRegisterDaemonProcedure,
		svc.RegisterDaemon,
		connect.WithSchema(daemonServiceMethods.ByName("RegisterDaemon")),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceSyncBlueprintsHandler := connect.NewServerStreamHandler(
		DaemonServiceSyncBlueprintsProcedure,
		svc.SyncBlueprints,
		connect.WithSchema(daemonServiceMethods.ByName("SyncBlueprints")),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceGetBlueprintHandler := connect.NewUnaryHandler(
		DaemonServiceGetBlueprintProcedure,
		svc.GetBlueprint,
		connect.WithSchema(daemonServiceMethods.ByName("GetBlueprint")),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceSyncServersHandler := connect.NewServerStreamHandler(
		DaemonServiceSyncServersProcedure,
		svc.SyncServers,
		connect.WithSchema(daemonServiceMethods.ByName("SyncServers")),
		connect.WithHandlerOptions(opts...),
	)
	daemonServiceGetServerHandler := connect.NewUnaryHandler(
		DaemonServiceGetServerProcedure,
		svc.GetServer,
		connect.WithSchema(daemonServiceMethods.ByName("GetServer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.DaemonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DaemonServiceRegisterDaemonProcedure:
			daemonServiceRegisterDaemonHandler.ServeHTTP(w, r)
		case DaemonServiceSyncBlueprintsProcedure:
			daemonServiceSyncBlueprintsHandler.ServeHTTP(w, r)
		case DaemonServiceGetBlueprintProcedure:
			daemonServiceGetBlueprintHandler.ServeHTTP(w, r)
		case DaemonServiceSyncServersProcedure:
			daemonServiceSyncServersHandler.ServeHTTP(w, r)
		case DaemonServiceGetServerProcedure:
			daemonServiceGetServerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDaemonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDaemonServiceHandler struct{}

func (UnimplementedDaemonServiceHandler) RegisterDaemon(context.Context, *connect.Request[backend.RegisterDaemonRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonService.RegisterDaemon is not implemented"))
}

func (UnimplementedDaemonServiceHandler) SyncBlueprints(context.Context, *connect.Request[proto_gen_go.Empty], *connect.ServerStream[backend.Blueprint]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonService.SyncBlueprints is not implemented"))
}

func (UnimplementedDaemonServiceHandler) GetBlueprint(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Blueprint], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonService.GetBlueprint is not implemented"))
}

func (UnimplementedDaemonServiceHandler) SyncServers(context.Context, *connect.Request[proto_gen_go.Empty], *connect.ServerStream[backend.Server]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonService.SyncServers is not implemented"))
}

func (UnimplementedDaemonServiceHandler) GetServer(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Server], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonService.GetServer is not implemented"))
}

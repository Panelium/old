// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/DaemonConnection.proto

package backendconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	proto_gen_go "panelium/proto_gen_go"
	backend "panelium/proto_gen_go/backend"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DaemonConnectionServiceName is the fully-qualified name of the DaemonConnectionService service.
	DaemonConnectionServiceName = "backend.DaemonConnectionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DaemonConnectionServiceCreateBackendTokenProcedure is the fully-qualified name of the
	// DaemonConnectionService's CreateBackendToken RPC.
	DaemonConnectionServiceCreateBackendTokenProcedure = "/backend.DaemonConnectionService/CreateBackendToken"
	// DaemonConnectionServiceRegisterDaemonProcedure is the fully-qualified name of the
	// DaemonConnectionService's RegisterDaemon RPC.
	DaemonConnectionServiceRegisterDaemonProcedure = "/backend.DaemonConnectionService/RegisterDaemon"
	// DaemonConnectionServiceSyncBlueprintsProcedure is the fully-qualified name of the
	// DaemonConnectionService's SyncBlueprints RPC.
	DaemonConnectionServiceSyncBlueprintsProcedure = "/backend.DaemonConnectionService/SyncBlueprints"
	// DaemonConnectionServiceGetBlueprintProcedure is the fully-qualified name of the
	// DaemonConnectionService's GetBlueprint RPC.
	DaemonConnectionServiceGetBlueprintProcedure = "/backend.DaemonConnectionService/GetBlueprint"
	// DaemonConnectionServiceSyncServersProcedure is the fully-qualified name of the
	// DaemonConnectionService's SyncServers RPC.
	DaemonConnectionServiceSyncServersProcedure = "/backend.DaemonConnectionService/SyncServers"
	// DaemonConnectionServiceGetServerProcedure is the fully-qualified name of the
	// DaemonConnectionService's GetServer RPC.
	DaemonConnectionServiceGetServerProcedure = "/backend.DaemonConnectionService/GetServer"
)

// DaemonConnectionServiceClient is a client for the backend.DaemonConnectionService service.
type DaemonConnectionServiceClient interface {
	CreateBackendToken(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.CreateTokenResponse], error)
	RegisterDaemon(context.Context, *connect.Request[backend.RegisterDaemonRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	SyncBlueprints(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.ServerStreamForClient[backend.Blueprint], error)
	GetBlueprint(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Blueprint], error)
	SyncServers(context.Context, *connect.Request[proto_gen_go.Empty]) (*connect.ServerStreamForClient[backend.Server], error)
	GetServer(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Server], error)
}

// NewDaemonConnectionServiceClient constructs a client for the backend.DaemonConnectionService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDaemonConnectionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DaemonConnectionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	daemonConnectionServiceMethods := backend.File_backend_DaemonConnection_proto.Services().ByName("DaemonConnectionService").Methods()
	return &daemonConnectionServiceClient{
		createBackendToken: connect.NewClient[proto_gen_go.SimpleIDMessage, backend.CreateTokenResponse](
			httpClient,
			baseURL+DaemonConnectionServiceCreateBackendTokenProcedure,
			connect.WithSchema(daemonConnectionServiceMethods.ByName("CreateBackendToken")),
			connect.WithClientOptions(opts...),
		),
		registerDaemon: connect.NewClient[backend.RegisterDaemonRequest, proto_gen_go.SuccessMessage](
			httpClient,
			baseURL+DaemonConnectionServiceRegisterDaemonProcedure,
			connect.WithSchema(daemonConnectionServiceMethods.ByName("RegisterDaemon")),
			connect.WithClientOptions(opts...),
		),
		syncBlueprints: connect.NewClient[proto_gen_go.Empty, backend.Blueprint](
			httpClient,
			baseURL+DaemonConnectionServiceSyncBlueprintsProcedure,
			connect.WithSchema(daemonConnectionServiceMethods.ByName("SyncBlueprints")),
			connect.WithClientOptions(opts...),
		),
		getBlueprint: connect.NewClient[proto_gen_go.SimpleIDMessage, backend.Blueprint](
			httpClient,
			baseURL+DaemonConnectionServiceGetBlueprintProcedure,
			connect.WithSchema(daemonConnectionServiceMethods.ByName("GetBlueprint")),
			connect.WithClientOptions(opts...),
		),
		syncServers: connect.NewClient[proto_gen_go.Empty, backend.Server](
			httpClient,
			baseURL+DaemonConnectionServiceSyncServersProcedure,
			connect.WithSchema(daemonConnectionServiceMethods.ByName("SyncServers")),
			connect.WithClientOptions(opts...),
		),
		getServer: connect.NewClient[proto_gen_go.SimpleIDMessage, backend.Server](
			httpClient,
			baseURL+DaemonConnectionServiceGetServerProcedure,
			connect.WithSchema(daemonConnectionServiceMethods.ByName("GetServer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// daemonConnectionServiceClient implements DaemonConnectionServiceClient.
type daemonConnectionServiceClient struct {
	createBackendToken *connect.Client[proto_gen_go.SimpleIDMessage, backend.CreateTokenResponse]
	registerDaemon     *connect.Client[backend.RegisterDaemonRequest, proto_gen_go.SuccessMessage]
	syncBlueprints     *connect.Client[proto_gen_go.Empty, backend.Blueprint]
	getBlueprint       *connect.Client[proto_gen_go.SimpleIDMessage, backend.Blueprint]
	syncServers        *connect.Client[proto_gen_go.Empty, backend.Server]
	getServer          *connect.Client[proto_gen_go.SimpleIDMessage, backend.Server]
}

// CreateBackendToken calls backend.DaemonConnectionService.CreateBackendToken.
func (c *daemonConnectionServiceClient) CreateBackendToken(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.CreateTokenResponse], error) {
	return c.createBackendToken.CallUnary(ctx, req)
}

// RegisterDaemon calls backend.DaemonConnectionService.RegisterDaemon.
func (c *daemonConnectionServiceClient) RegisterDaemon(ctx context.Context, req *connect.Request[backend.RegisterDaemonRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return c.registerDaemon.CallUnary(ctx, req)
}

// SyncBlueprints calls backend.DaemonConnectionService.SyncBlueprints.
func (c *daemonConnectionServiceClient) SyncBlueprints(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.ServerStreamForClient[backend.Blueprint], error) {
	return c.syncBlueprints.CallServerStream(ctx, req)
}

// GetBlueprint calls backend.DaemonConnectionService.GetBlueprint.
func (c *daemonConnectionServiceClient) GetBlueprint(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Blueprint], error) {
	return c.getBlueprint.CallUnary(ctx, req)
}

// SyncServers calls backend.DaemonConnectionService.SyncServers.
func (c *daemonConnectionServiceClient) SyncServers(ctx context.Context, req *connect.Request[proto_gen_go.Empty]) (*connect.ServerStreamForClient[backend.Server], error) {
	return c.syncServers.CallServerStream(ctx, req)
}

// GetServer calls backend.DaemonConnectionService.GetServer.
func (c *daemonConnectionServiceClient) GetServer(ctx context.Context, req *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Server], error) {
	return c.getServer.CallUnary(ctx, req)
}

// DaemonConnectionServiceHandler is an implementation of the backend.DaemonConnectionService
// service.
type DaemonConnectionServiceHandler interface {
	CreateBackendToken(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.CreateTokenResponse], error)
	RegisterDaemon(context.Context, *connect.Request[backend.RegisterDaemonRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error)
	SyncBlueprints(context.Context, *connect.Request[proto_gen_go.Empty], *connect.ServerStream[backend.Blueprint]) error
	GetBlueprint(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Blueprint], error)
	SyncServers(context.Context, *connect.Request[proto_gen_go.Empty], *connect.ServerStream[backend.Server]) error
	GetServer(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Server], error)
}

// NewDaemonConnectionServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDaemonConnectionServiceHandler(svc DaemonConnectionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	daemonConnectionServiceMethods := backend.File_backend_DaemonConnection_proto.Services().ByName("DaemonConnectionService").Methods()
	daemonConnectionServiceCreateBackendTokenHandler := connect.NewUnaryHandler(
		DaemonConnectionServiceCreateBackendTokenProcedure,
		svc.CreateBackendToken,
		connect.WithSchema(daemonConnectionServiceMethods.ByName("CreateBackendToken")),
		connect.WithHandlerOptions(opts...),
	)
	daemonConnectionServiceRegisterDaemonHandler := connect.NewUnaryHandler(
		DaemonConnectionServiceRegisterDaemonProcedure,
		svc.RegisterDaemon,
		connect.WithSchema(daemonConnectionServiceMethods.ByName("RegisterDaemon")),
		connect.WithHandlerOptions(opts...),
	)
	daemonConnectionServiceSyncBlueprintsHandler := connect.NewServerStreamHandler(
		DaemonConnectionServiceSyncBlueprintsProcedure,
		svc.SyncBlueprints,
		connect.WithSchema(daemonConnectionServiceMethods.ByName("SyncBlueprints")),
		connect.WithHandlerOptions(opts...),
	)
	daemonConnectionServiceGetBlueprintHandler := connect.NewUnaryHandler(
		DaemonConnectionServiceGetBlueprintProcedure,
		svc.GetBlueprint,
		connect.WithSchema(daemonConnectionServiceMethods.ByName("GetBlueprint")),
		connect.WithHandlerOptions(opts...),
	)
	daemonConnectionServiceSyncServersHandler := connect.NewServerStreamHandler(
		DaemonConnectionServiceSyncServersProcedure,
		svc.SyncServers,
		connect.WithSchema(daemonConnectionServiceMethods.ByName("SyncServers")),
		connect.WithHandlerOptions(opts...),
	)
	daemonConnectionServiceGetServerHandler := connect.NewUnaryHandler(
		DaemonConnectionServiceGetServerProcedure,
		svc.GetServer,
		connect.WithSchema(daemonConnectionServiceMethods.ByName("GetServer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.DaemonConnectionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DaemonConnectionServiceCreateBackendTokenProcedure:
			daemonConnectionServiceCreateBackendTokenHandler.ServeHTTP(w, r)
		case DaemonConnectionServiceRegisterDaemonProcedure:
			daemonConnectionServiceRegisterDaemonHandler.ServeHTTP(w, r)
		case DaemonConnectionServiceSyncBlueprintsProcedure:
			daemonConnectionServiceSyncBlueprintsHandler.ServeHTTP(w, r)
		case DaemonConnectionServiceGetBlueprintProcedure:
			daemonConnectionServiceGetBlueprintHandler.ServeHTTP(w, r)
		case DaemonConnectionServiceSyncServersProcedure:
			daemonConnectionServiceSyncServersHandler.ServeHTTP(w, r)
		case DaemonConnectionServiceGetServerProcedure:
			daemonConnectionServiceGetServerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDaemonConnectionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDaemonConnectionServiceHandler struct{}

func (UnimplementedDaemonConnectionServiceHandler) CreateBackendToken(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.CreateTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonConnectionService.CreateBackendToken is not implemented"))
}

func (UnimplementedDaemonConnectionServiceHandler) RegisterDaemon(context.Context, *connect.Request[backend.RegisterDaemonRequest]) (*connect.Response[proto_gen_go.SuccessMessage], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonConnectionService.RegisterDaemon is not implemented"))
}

func (UnimplementedDaemonConnectionServiceHandler) SyncBlueprints(context.Context, *connect.Request[proto_gen_go.Empty], *connect.ServerStream[backend.Blueprint]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonConnectionService.SyncBlueprints is not implemented"))
}

func (UnimplementedDaemonConnectionServiceHandler) GetBlueprint(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Blueprint], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonConnectionService.GetBlueprint is not implemented"))
}

func (UnimplementedDaemonConnectionServiceHandler) SyncServers(context.Context, *connect.Request[proto_gen_go.Empty], *connect.ServerStream[backend.Server]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonConnectionService.SyncServers is not implemented"))
}

func (UnimplementedDaemonConnectionServiceHandler) GetServer(context.Context, *connect.Request[proto_gen_go.SimpleIDMessage]) (*connect.Response[backend.Server], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.DaemonConnectionService.GetServer is not implemented"))
}

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: daemon.proto

package daemonconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	common "panelium/proto-gen-go/common"
	daemon "panelium/proto-gen-go/daemon"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServerServiceName is the fully-qualified name of the ServerService service.
	ServerServiceName = "daemon.ServerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServerServiceConsoleProcedure is the fully-qualified name of the ServerService's Console RPC.
	ServerServiceConsoleProcedure = "/daemon.ServerService/Console"
	// ServerServiceRunCommandProcedure is the fully-qualified name of the ServerService's RunCommand
	// RPC.
	ServerServiceRunCommandProcedure = "/daemon.ServerService/RunCommand"
	// ServerServiceTerminalProcedure is the fully-qualified name of the ServerService's Terminal RPC.
	ServerServiceTerminalProcedure = "/daemon.ServerService/Terminal"
	// ServerServiceRunTerminalCommandProcedure is the fully-qualified name of the ServerService's
	// RunTerminalCommand RPC.
	ServerServiceRunTerminalCommandProcedure = "/daemon.ServerService/RunTerminalCommand"
	// ServerServiceGetStatusProcedure is the fully-qualified name of the ServerService's GetStatus RPC.
	ServerServiceGetStatusProcedure = "/daemon.ServerService/GetStatus"
	// ServerServicePowerActionProcedure is the fully-qualified name of the ServerService's PowerAction
	// RPC.
	ServerServicePowerActionProcedure = "/daemon.ServerService/PowerAction"
)

// ServerServiceClient is a client for the daemon.ServerService service.
type ServerServiceClient interface {
	// Console (process)
	Console(context.Context) *connect.BidiStreamForClient[common.SimpleMessage, common.SimpleMessage]
	RunCommand(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error)
	// Terminal (system)
	Terminal(context.Context) *connect.BidiStreamForClient[common.SimpleMessage, common.SimpleMessage]
	RunTerminalCommand(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error)
	// Server Info
	GetStatus(context.Context, *connect.Request[common.Empty]) (*connect.Response[daemon.ServerStatus], error)
	// Power Actions
	PowerAction(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error)
}

// NewServerServiceClient constructs a client for the daemon.ServerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serverServiceMethods := daemon.File_daemon_proto.Services().ByName("ServerService").Methods()
	return &serverServiceClient{
		console: connect.NewClient[common.SimpleMessage, common.SimpleMessage](
			httpClient,
			baseURL+ServerServiceConsoleProcedure,
			connect.WithSchema(serverServiceMethods.ByName("Console")),
			connect.WithClientOptions(opts...),
		),
		runCommand: connect.NewClient[common.SimpleMessage, common.Empty](
			httpClient,
			baseURL+ServerServiceRunCommandProcedure,
			connect.WithSchema(serverServiceMethods.ByName("RunCommand")),
			connect.WithClientOptions(opts...),
		),
		terminal: connect.NewClient[common.SimpleMessage, common.SimpleMessage](
			httpClient,
			baseURL+ServerServiceTerminalProcedure,
			connect.WithSchema(serverServiceMethods.ByName("Terminal")),
			connect.WithClientOptions(opts...),
		),
		runTerminalCommand: connect.NewClient[common.SimpleMessage, common.Empty](
			httpClient,
			baseURL+ServerServiceRunTerminalCommandProcedure,
			connect.WithSchema(serverServiceMethods.ByName("RunTerminalCommand")),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[common.Empty, daemon.ServerStatus](
			httpClient,
			baseURL+ServerServiceGetStatusProcedure,
			connect.WithSchema(serverServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
		powerAction: connect.NewClient[common.SimpleMessage, common.Empty](
			httpClient,
			baseURL+ServerServicePowerActionProcedure,
			connect.WithSchema(serverServiceMethods.ByName("PowerAction")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serverServiceClient implements ServerServiceClient.
type serverServiceClient struct {
	console            *connect.Client[common.SimpleMessage, common.SimpleMessage]
	runCommand         *connect.Client[common.SimpleMessage, common.Empty]
	terminal           *connect.Client[common.SimpleMessage, common.SimpleMessage]
	runTerminalCommand *connect.Client[common.SimpleMessage, common.Empty]
	getStatus          *connect.Client[common.Empty, daemon.ServerStatus]
	powerAction        *connect.Client[common.SimpleMessage, common.Empty]
}

// Console calls daemon.ServerService.Console.
func (c *serverServiceClient) Console(ctx context.Context) *connect.BidiStreamForClient[common.SimpleMessage, common.SimpleMessage] {
	return c.console.CallBidiStream(ctx)
}

// RunCommand calls daemon.ServerService.RunCommand.
func (c *serverServiceClient) RunCommand(ctx context.Context, req *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error) {
	return c.runCommand.CallUnary(ctx, req)
}

// Terminal calls daemon.ServerService.Terminal.
func (c *serverServiceClient) Terminal(ctx context.Context) *connect.BidiStreamForClient[common.SimpleMessage, common.SimpleMessage] {
	return c.terminal.CallBidiStream(ctx)
}

// RunTerminalCommand calls daemon.ServerService.RunTerminalCommand.
func (c *serverServiceClient) RunTerminalCommand(ctx context.Context, req *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error) {
	return c.runTerminalCommand.CallUnary(ctx, req)
}

// GetStatus calls daemon.ServerService.GetStatus.
func (c *serverServiceClient) GetStatus(ctx context.Context, req *connect.Request[common.Empty]) (*connect.Response[daemon.ServerStatus], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// PowerAction calls daemon.ServerService.PowerAction.
func (c *serverServiceClient) PowerAction(ctx context.Context, req *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error) {
	return c.powerAction.CallUnary(ctx, req)
}

// ServerServiceHandler is an implementation of the daemon.ServerService service.
type ServerServiceHandler interface {
	// Console (process)
	Console(context.Context, *connect.BidiStream[common.SimpleMessage, common.SimpleMessage]) error
	RunCommand(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error)
	// Terminal (system)
	Terminal(context.Context, *connect.BidiStream[common.SimpleMessage, common.SimpleMessage]) error
	RunTerminalCommand(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error)
	// Server Info
	GetStatus(context.Context, *connect.Request[common.Empty]) (*connect.Response[daemon.ServerStatus], error)
	// Power Actions
	PowerAction(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error)
}

// NewServerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServerServiceHandler(svc ServerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serverServiceMethods := daemon.File_daemon_proto.Services().ByName("ServerService").Methods()
	serverServiceConsoleHandler := connect.NewBidiStreamHandler(
		ServerServiceConsoleProcedure,
		svc.Console,
		connect.WithSchema(serverServiceMethods.ByName("Console")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceRunCommandHandler := connect.NewUnaryHandler(
		ServerServiceRunCommandProcedure,
		svc.RunCommand,
		connect.WithSchema(serverServiceMethods.ByName("RunCommand")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceTerminalHandler := connect.NewBidiStreamHandler(
		ServerServiceTerminalProcedure,
		svc.Terminal,
		connect.WithSchema(serverServiceMethods.ByName("Terminal")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceRunTerminalCommandHandler := connect.NewUnaryHandler(
		ServerServiceRunTerminalCommandProcedure,
		svc.RunTerminalCommand,
		connect.WithSchema(serverServiceMethods.ByName("RunTerminalCommand")),
		connect.WithHandlerOptions(opts...),
	)
	serverServiceGetStatusHandler := connect.NewUnaryHandler(
		ServerServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(serverServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	serverServicePowerActionHandler := connect.NewUnaryHandler(
		ServerServicePowerActionProcedure,
		svc.PowerAction,
		connect.WithSchema(serverServiceMethods.ByName("PowerAction")),
		connect.WithHandlerOptions(opts...),
	)
	return "/daemon.ServerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServerServiceConsoleProcedure:
			serverServiceConsoleHandler.ServeHTTP(w, r)
		case ServerServiceRunCommandProcedure:
			serverServiceRunCommandHandler.ServeHTTP(w, r)
		case ServerServiceTerminalProcedure:
			serverServiceTerminalHandler.ServeHTTP(w, r)
		case ServerServiceRunTerminalCommandProcedure:
			serverServiceRunTerminalCommandHandler.ServeHTTP(w, r)
		case ServerServiceGetStatusProcedure:
			serverServiceGetStatusHandler.ServeHTTP(w, r)
		case ServerServicePowerActionProcedure:
			serverServicePowerActionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServerServiceHandler struct{}

func (UnimplementedServerServiceHandler) Console(context.Context, *connect.BidiStream[common.SimpleMessage, common.SimpleMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.Console is not implemented"))
}

func (UnimplementedServerServiceHandler) RunCommand(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.RunCommand is not implemented"))
}

func (UnimplementedServerServiceHandler) Terminal(context.Context, *connect.BidiStream[common.SimpleMessage, common.SimpleMessage]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.Terminal is not implemented"))
}

func (UnimplementedServerServiceHandler) RunTerminalCommand(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.RunTerminalCommand is not implemented"))
}

func (UnimplementedServerServiceHandler) GetStatus(context.Context, *connect.Request[common.Empty]) (*connect.Response[daemon.ServerStatus], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.GetStatus is not implemented"))
}

func (UnimplementedServerServiceHandler) PowerAction(context.Context, *connect.Request[common.SimpleMessage]) (*connect.Response[common.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("daemon.ServerService.PowerAction is not implemented"))
}

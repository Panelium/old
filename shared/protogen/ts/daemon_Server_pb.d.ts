// @generated by protoc-gen-es v2.5.0 with parameter "target=js+dts,import_extension=none,js_import_style=module"
// @generated from file daemon_Server.proto (package daemon, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { EmptySchema, SimpleMessageSchema, SuccessMessageSchema } from "./common_pb";

/**
 * Describes the file daemon_Server.proto.
 */
export declare const file_daemon_Server: GenFile;

/**
 * @generated from message daemon.Allocation
 */
export declare type Allocation = Message<"daemon.Allocation"> & {
  /**
   * @generated from field: string ip = 1;
   */
  ip: string;

  /**
   * MUST BE 1024-65535
   *
   * @generated from field: uint32 port = 2;
   */
  port: number;
};

/**
 * Describes the message daemon.Allocation.
 * Use `create(AllocationSchema)` to create a new message.
 */
export declare const AllocationSchema: GenMessage<Allocation>;

/**
 * @generated from message daemon.ResourceLimit
 */
export declare type ResourceLimit = Message<"daemon.ResourceLimit"> & {
  /**
   * CPU in percentage (100% = 1 vCore)
   *
   * @generated from field: uint32 cpu = 1;
   */
  cpu: number;

  /**
   * RAM in MB
   *
   * @generated from field: uint32 ram = 2;
   */
  ram: number;

  /**
   * SWAP in MB
   *
   * @generated from field: uint32 swap = 3;
   */
  swap: number;

  /**
   * Storage in MB
   *
   * @generated from field: uint32 storage = 4;
   */
  storage: number;
};

/**
 * Describes the message daemon.ResourceLimit.
 * Use `create(ResourceLimitSchema)` to create a new message.
 */
export declare const ResourceLimitSchema: GenMessage<ResourceLimit>;

/**
 * @generated from message daemon.ResourceUsage
 */
export declare type ResourceUsage = Message<"daemon.ResourceUsage"> & {
  /**
   * CPU in percentage (100% = 1 vCore)
   *
   * @generated from field: uint32 cpu = 1;
   */
  cpu: number;

  /**
   * RAM in MB
   *
   * @generated from field: uint32 ram = 2;
   */
  ram: number;

  /**
   * SWAP in MB
   *
   * @generated from field: uint32 swap = 3;
   */
  swap: number;

  /**
   * Storage in MB
   *
   * @generated from field: uint32 storage = 4;
   */
  storage: number;
};

/**
 * Describes the message daemon.ResourceUsage.
 * Use `create(ResourceUsageSchema)` to create a new message.
 */
export declare const ResourceUsageSchema: GenMessage<ResourceUsage>;

/**
 * Server Management
 *
 * @generated from message daemon.CreateServerRequest
 */
export declare type CreateServerRequest = Message<"daemon.CreateServerRequest"> & {
  /**
   * @generated from field: string serverId = 1;
   */
  serverId: string;

  /**
   * @generated from field: repeated daemon.Allocation allocations = 2;
   */
  allocations: Allocation[];

  /**
   * @generated from field: daemon.ResourceLimit resourceLimit = 3;
   */
  resourceLimit?: ResourceLimit;

  /**
   * @generated from field: string blueprintId = 4;
   */
  blueprintId: string;

  /**
   * @generated from field: string dockerImage = 5;
   */
  dockerImage: string;
};

/**
 * Describes the message daemon.CreateServerRequest.
 * Use `create(CreateServerRequestSchema)` to create a new message.
 */
export declare const CreateServerRequestSchema: GenMessage<CreateServerRequest>;

/**
 * @generated from message daemon.DeleteServerRequest
 */
export declare type DeleteServerRequest = Message<"daemon.DeleteServerRequest"> & {
  /**
   * @generated from field: string serverId = 1;
   */
  serverId: string;

  /**
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message daemon.DeleteServerRequest.
 * Use `create(DeleteServerRequestSchema)` to create a new message.
 */
export declare const DeleteServerRequestSchema: GenMessage<DeleteServerRequest>;

/**
 * Server Info
 *
 * @generated from message daemon.ServerStatus
 */
export declare type ServerStatus = Message<"daemon.ServerStatus"> & {
  /**
   * @generated from field: daemon.ServerStatusType status = 1;
   */
  status: ServerStatusType;

  /**
   * @generated from field: optional google.protobuf.Timestamp timestampStart = 2;
   */
  timestampStart?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp timestampEnd = 3;
   */
  timestampEnd?: Timestamp;

  /**
   * @generated from field: optional daemon.ServerOfflineReason offlineReason = 4;
   */
  offlineReason?: ServerOfflineReason;

  /**
   * @generated from field: daemon.ResourceUsage resourceUsage = 5;
   */
  resourceUsage?: ResourceUsage;
};

/**
 * Describes the message daemon.ServerStatus.
 * Use `create(ServerStatusSchema)` to create a new message.
 */
export declare const ServerStatusSchema: GenMessage<ServerStatus>;

/**
 * @generated from enum daemon.ServerStatusType
 */
export enum ServerStatusType {
  /**
   * @generated from enum value: SERVER_STATUS_TYPE_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SERVER_STATUS_TYPE_STARTING = 1;
   */
  STARTING = 1,

  /**
   * @generated from enum value: SERVER_STATUS_TYPE_ONLINE = 2;
   */
  ONLINE = 2,

  /**
   * @generated from enum value: SERVER_STATUS_TYPE_STOPPING = 3;
   */
  STOPPING = 3,

  /**
   * @generated from enum value: SERVER_STATUS_TYPE_OFFLINE = 4;
   */
  OFFLINE = 4,

  /**
   * @generated from enum value: SERVER_STATUS_TYPE_INSTALLING = 5;
   */
  INSTALLING = 5,
}

/**
 * Describes the enum daemon.ServerStatusType.
 */
export declare const ServerStatusTypeSchema: GenEnum<ServerStatusType>;

/**
 * @generated from enum daemon.ServerOfflineReason
 */
export enum ServerOfflineReason {
  /**
   * @generated from enum value: SERVER_OFFLINE_REASON_UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SERVER_OFFLINE_REASON_CREATED = 1;
   */
  CREATED = 1,

  /**
   * @generated from enum value: SERVER_OFFLINE_REASON_STOPPED = 2;
   */
  STOPPED = 2,

  /**
   * @generated from enum value: SERVER_OFFLINE_REASON_KILLED = 3;
   */
  KILLED = 3,

  /**
   * @generated from enum value: SERVER_OFFLINE_REASON_ERROR = 4;
   */
  ERROR = 4,
}

/**
 * Describes the enum daemon.ServerOfflineReason.
 */
export declare const ServerOfflineReasonSchema: GenEnum<ServerOfflineReason>;

/**
 * Power Actions
 *
 * @generated from enum daemon.PowerAction
 */
export enum PowerAction {
  /**
   * Default value, should not be used
   *
   * @generated from enum value: POWER_ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: POWER_ACTION_START = 1;
   */
  START = 1,

  /**
   * @generated from enum value: POWER_ACTION_RESTART = 2;
   */
  RESTART = 2,

  /**
   * @generated from enum value: POWER_ACTION_STOP = 3;
   */
  STOP = 3,

  /**
   * @generated from enum value: POWER_ACTION_KILL = 4;
   */
  KILL = 4,
}

/**
 * Describes the enum daemon.PowerAction.
 */
export declare const PowerActionSchema: GenEnum<PowerAction>;

/**
 * @generated from service daemon.ServerService
 */
export declare const ServerService: GenService<{
  /**
   * / Server Management
   * / - Called by backend, needs token
   *
   * @generated from rpc daemon.ServerService.CreateServer
   */
  createServer: {
    methodKind: "unary";
    input: typeof CreateServerRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc daemon.ServerService.DeleteServer
   */
  deleteServer: {
    methodKind: "unary";
    input: typeof DeleteServerRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * / Server Actions - Requires a ServerID http header
   * / - Called by client, needs jwt
   * Console (process)
   *
   * @generated from rpc daemon.ServerService.Console
   */
  console: {
    methodKind: "bidi_streaming";
    input: typeof SimpleMessageSchema;
    output: typeof SimpleMessageSchema;
  },
  /**
   * @generated from rpc daemon.ServerService.RunCommand
   */
  runCommand: {
    methodKind: "unary";
    input: typeof SimpleMessageSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * Terminal (system)
   *
   * @generated from rpc daemon.ServerService.Terminal
   */
  terminal: {
    methodKind: "bidi_streaming";
    input: typeof SimpleMessageSchema;
    output: typeof SimpleMessageSchema;
  },
  /**
   * @generated from rpc daemon.ServerService.RunTerminalCommand
   */
  runTerminalCommand: {
    methodKind: "unary";
    input: typeof SimpleMessageSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * Server Info
   *
   * @generated from rpc daemon.ServerService.GetStatus
   */
  getStatus: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ServerStatusSchema;
  },
  /**
   * Power Actions
   *
   * @generated from rpc daemon.ServerService.PowerAction
   */
  powerAction: {
    methodKind: "unary";
    input: typeof SimpleMessageSchema;
    output: typeof SuccessMessageSchema;
  },
}>;


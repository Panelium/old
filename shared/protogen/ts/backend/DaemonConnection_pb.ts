// @generated by protoc-gen-es v2.5.0 with parameter "target=ts,import_extension=none,js_import_style=module"
// @generated from file backend/DaemonConnection.proto (package backend, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { EmptySchema, IPAllocation, ResourceLimit, SimpleIDMessageSchema, SuccessMessageSchema } from "../common_pb";
import { file_common } from "../common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file backend/DaemonConnection.proto.
 */
export const file_backend_DaemonConnection: GenFile = /*@__PURE__*/
  fileDesc("Ch5iYWNrZW5kL0RhZW1vbkNvbm5lY3Rpb24ucHJvdG8SB2JhY2tlbmQiLAoTQ3JlYXRlVG9rZW5SZXNwb25zZRIVCg1iYWNrZW5kX3Rva2VuGAEgASgJIkIKFVJlZ2lzdGVyRGFlbW9uUmVxdWVzdBIVCg1iYWNrZW5kX3Rva2VuGAEgASgJEhIKCm5vZGVfdG9rZW4YAiABKAkimwIKCUJsdWVwcmludBILCgNiaWQYASABKAkSDwoHdmVyc2lvbhgCIAEoDRINCgVmbGFncxgDIAMoCRIVCg1kb2NrZXJfaW1hZ2VzGAQgAygJEisKDWJsb2NrZWRfZmlsZXMYBSADKAsyFC5iYWNrZW5kLkJsb2NrZWRGaWxlEhUKDXNlcnZlcl9iaW5hcnkYBiABKAkSFQoNc3RhcnRfY29tbWFuZBgHIAEoCRIUCgxzdG9wX2NvbW1hbmQYCCABKAkSGwoTc2V0dXBfc2NyaXB0X2Jhc2U2NBgJIAEoCRIaChJzZXR1cF9kb2NrZXJfaW1hZ2UYCiABKAkSIAoYc2V0dXBfc2NyaXB0X2ludGVycHJldGVyGAsgASgJIj4KC0Jsb2NrZWRGaWxlEgwKBGZpbGUYASABKAkSDwoHdmlzaWJsZRgCIAEoCBIQCghyZWFkYWJsZRgDIAEoCCK2AQoGU2VydmVyEgsKA3NpZBgBIAEoCRIQCghvd25lcl9pZBgCIAEoCRIQCgh1c2VyX2lkcxgDIAMoCRIpCgthbGxvY2F0aW9ucxgEIAMoCzIULmNvbW1vbi5JUEFsbG9jYXRpb24SLQoOcmVzb3VyY2VfbGltaXQYBSABKAsyFS5jb21tb24uUmVzb3VyY2VMaW1pdBIUCgxkb2NrZXJfaW1hZ2UYBiABKAkSCwoDYmlkGAcgASgJMowDChdEYWVtb25Db25uZWN0aW9uU2VydmljZRJLChJDcmVhdGVCYWNrZW5kVG9rZW4SFy5jb21tb24uU2ltcGxlSURNZXNzYWdlGhwuYmFja2VuZC5DcmVhdGVUb2tlblJlc3BvbnNlEkgKDlJlZ2lzdGVyRGFlbW9uEh4uYmFja2VuZC5SZWdpc3RlckRhZW1vblJlcXVlc3QaFi5jb21tb24uU3VjY2Vzc01lc3NhZ2USNQoOU3luY0JsdWVwcmludHMSDS5jb21tb24uRW1wdHkaEi5iYWNrZW5kLkJsdWVwcmludDABEjsKDEdldEJsdWVwcmludBIXLmNvbW1vbi5TaW1wbGVJRE1lc3NhZ2UaEi5iYWNrZW5kLkJsdWVwcmludBIvCgtTeW5jU2VydmVycxINLmNvbW1vbi5FbXB0eRoPLmJhY2tlbmQuU2VydmVyMAESNQoJR2V0U2VydmVyEhcuY29tbW9uLlNpbXBsZUlETWVzc2FnZRoPLmJhY2tlbmQuU2VydmVyQh9aHXBhbmVsaXVtL3Byb3RvX2dlbl9nby9iYWNrZW5kYgZwcm90bzM", [file_common]);

/**
 * @generated from message backend.CreateTokenResponse
 */
export type CreateTokenResponse = Message<"backend.CreateTokenResponse"> & {
  /**
   * @generated from field: string backend_token = 1;
   */
  backendToken: string;
};

/**
 * Describes the message backend.CreateTokenResponse.
 * Use `create(CreateTokenResponseSchema)` to create a new message.
 */
export const CreateTokenResponseSchema: GenMessage<CreateTokenResponse> = /*@__PURE__*/
  messageDesc(file_backend_DaemonConnection, 0);

/**
 * @generated from message backend.RegisterDaemonRequest
 */
export type RegisterDaemonRequest = Message<"backend.RegisterDaemonRequest"> & {
  /**
   * @generated from field: string backend_token = 1;
   */
  backendToken: string;

  /**
   * @generated from field: string node_token = 2;
   */
  nodeToken: string;
};

/**
 * Describes the message backend.RegisterDaemonRequest.
 * Use `create(RegisterDaemonRequestSchema)` to create a new message.
 */
export const RegisterDaemonRequestSchema: GenMessage<RegisterDaemonRequest> = /*@__PURE__*/
  messageDesc(file_backend_DaemonConnection, 1);

/**
 * @generated from message backend.Blueprint
 */
export type Blueprint = Message<"backend.Blueprint"> & {
  /**
   * @generated from field: string bid = 1;
   */
  bid: string;

  /**
   * @generated from field: uint32 version = 2;
   */
  version: number;

  /**
   * @generated from field: repeated string flags = 3;
   */
  flags: string[];

  /**
   * only the uri
   *
   * @generated from field: repeated string docker_images = 4;
   */
  dockerImages: string[];

  /**
   * @generated from field: repeated backend.BlockedFile blocked_files = 5;
   */
  blockedFiles: BlockedFile[];

  /**
   * @generated from field: string server_binary = 6;
   */
  serverBinary: string;

  /**
   * @generated from field: string start_command = 7;
   */
  startCommand: string;

  /**
   * @generated from field: string stop_command = 8;
   */
  stopCommand: string;

  /**
   * @generated from field: string setup_script_base64 = 9;
   */
  setupScriptBase64: string;

  /**
   * @generated from field: string setup_docker_image = 10;
   */
  setupDockerImage: string;

  /**
   * @generated from field: string setup_script_interpreter = 11;
   */
  setupScriptInterpreter: string;
};

/**
 * Describes the message backend.Blueprint.
 * Use `create(BlueprintSchema)` to create a new message.
 */
export const BlueprintSchema: GenMessage<Blueprint> = /*@__PURE__*/
  messageDesc(file_backend_DaemonConnection, 2);

/**
 * @generated from message backend.BlockedFile
 */
export type BlockedFile = Message<"backend.BlockedFile"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: bool visible = 2;
   */
  visible: boolean;

  /**
   * @generated from field: bool readable = 3;
   */
  readable: boolean;
};

/**
 * Describes the message backend.BlockedFile.
 * Use `create(BlockedFileSchema)` to create a new message.
 */
export const BlockedFileSchema: GenMessage<BlockedFile> = /*@__PURE__*/
  messageDesc(file_backend_DaemonConnection, 3);

/**
 * @generated from message backend.Server
 */
export type Server = Message<"backend.Server"> & {
  /**
   * @generated from field: string sid = 1;
   */
  sid: string;

  /**
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  /**
   * @generated from field: repeated string user_ids = 3;
   */
  userIds: string[];

  /**
   * @generated from field: repeated common.IPAllocation allocations = 4;
   */
  allocations: IPAllocation[];

  /**
   * @generated from field: common.ResourceLimit resource_limit = 5;
   */
  resourceLimit?: ResourceLimit;

  /**
   * @generated from field: string docker_image = 6;
   */
  dockerImage: string;

  /**
   * @generated from field: string bid = 7;
   */
  bid: string;
};

/**
 * Describes the message backend.Server.
 * Use `create(ServerSchema)` to create a new message.
 */
export const ServerSchema: GenMessage<Server> = /*@__PURE__*/
  messageDesc(file_backend_DaemonConnection, 4);

/**
 * @generated from service backend.DaemonConnectionService
 */
export const DaemonConnectionService: GenService<{
  /**
   * @generated from rpc backend.DaemonConnectionService.CreateBackendToken
   */
  createBackendToken: {
    methodKind: "unary";
    input: typeof SimpleIDMessageSchema;
    output: typeof CreateTokenResponseSchema;
  },
  /**
   * @generated from rpc backend.DaemonConnectionService.RegisterDaemon
   */
  registerDaemon: {
    methodKind: "unary";
    input: typeof RegisterDaemonRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc backend.DaemonConnectionService.SyncBlueprints
   */
  syncBlueprints: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof BlueprintSchema;
  },
  /**
   * @generated from rpc backend.DaemonConnectionService.GetBlueprint
   */
  getBlueprint: {
    methodKind: "unary";
    input: typeof SimpleIDMessageSchema;
    output: typeof BlueprintSchema;
  },
  /**
   * @generated from rpc backend.DaemonConnectionService.SyncServers
   */
  syncServers: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof ServerSchema;
  },
  /**
   * @generated from rpc backend.DaemonConnectionService.GetServer
   */
  getServer: {
    methodKind: "unary";
    input: typeof SimpleIDMessageSchema;
    output: typeof ServerSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_backend_DaemonConnection, 0);


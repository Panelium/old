// @generated by protoc-gen-es v2.5.0 with parameter "target=ts,import_extension=none,js_import_style=module"
// @generated from file backend/Daemon.proto (package backend, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { EmptySchema, IPAllocation, ResourceLimit, SimpleIDMessageSchema, SuccessMessageSchema } from "../common_pb";
import { file_common } from "../common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file backend/Daemon.proto.
 */
export const file_backend_Daemon: GenFile = /*@__PURE__*/
  fileDesc("ChRiYWNrZW5kL0RhZW1vbi5wcm90bxIHYmFja2VuZCIrChVSZWdpc3RlckRhZW1vblJlcXVlc3QSEgoKbm9kZV90b2tlbhgBIAEoCSKbAgoJQmx1ZXByaW50EgsKA2JpZBgBIAEoCRIPCgd2ZXJzaW9uGAIgASgNEg0KBWZsYWdzGAMgAygJEhUKDWRvY2tlcl9pbWFnZXMYBCADKAkSKwoNYmxvY2tlZF9maWxlcxgFIAMoCzIULmJhY2tlbmQuQmxvY2tlZEZpbGUSFQoNc2VydmVyX2JpbmFyeRgGIAEoCRIVCg1zdGFydF9jb21tYW5kGAcgASgJEhQKDHN0b3BfY29tbWFuZBgIIAEoCRIbChNzZXR1cF9zY3JpcHRfYmFzZTY0GAkgASgJEhoKEnNldHVwX2RvY2tlcl9pbWFnZRgKIAEoCRIgChhzZXR1cF9zY3JpcHRfaW50ZXJwcmV0ZXIYCyABKAkiPgoLQmxvY2tlZEZpbGUSDAoEZmlsZRgBIAEoCRIPCgd2aXNpYmxlGAIgASgIEhAKCHJlYWRhYmxlGAMgASgIIrYBCgZTZXJ2ZXISCwoDc2lkGAEgASgJEhAKCG93bmVyX2lkGAIgASgJEhAKCHVzZXJfaWRzGAMgAygJEikKC2FsbG9jYXRpb25zGAQgAygLMhQuY29tbW9uLklQQWxsb2NhdGlvbhItCg5yZXNvdXJjZV9saW1pdBgFIAEoCzIVLmNvbW1vbi5SZXNvdXJjZUxpbWl0EhQKDGRvY2tlcl9pbWFnZRgGIAEoCRILCgNiaWQYByABKAkytQIKDURhZW1vblNlcnZpY2USSAoOUmVnaXN0ZXJEYWVtb24SHi5iYWNrZW5kLlJlZ2lzdGVyRGFlbW9uUmVxdWVzdBoWLmNvbW1vbi5TdWNjZXNzTWVzc2FnZRI1Cg5TeW5jQmx1ZXByaW50cxINLmNvbW1vbi5FbXB0eRoSLmJhY2tlbmQuQmx1ZXByaW50MAESOwoMR2V0Qmx1ZXByaW50EhcuY29tbW9uLlNpbXBsZUlETWVzc2FnZRoSLmJhY2tlbmQuQmx1ZXByaW50Ei8KC1N5bmNTZXJ2ZXJzEg0uY29tbW9uLkVtcHR5Gg8uYmFja2VuZC5TZXJ2ZXIwARI1CglHZXRTZXJ2ZXISFy5jb21tb24uU2ltcGxlSURNZXNzYWdlGg8uYmFja2VuZC5TZXJ2ZXJCH1odcGFuZWxpdW0vcHJvdG9fZ2VuX2dvL2JhY2tlbmRiBnByb3RvMw", [file_common]);

/**
 * @generated from message backend.RegisterDaemonRequest
 */
export type RegisterDaemonRequest = Message<"backend.RegisterDaemonRequest"> & {
  /**
   * @generated from field: string node_token = 1;
   */
  nodeToken: string;
};

/**
 * Describes the message backend.RegisterDaemonRequest.
 * Use `create(RegisterDaemonRequestSchema)` to create a new message.
 */
export const RegisterDaemonRequestSchema: GenMessage<RegisterDaemonRequest> = /*@__PURE__*/
  messageDesc(file_backend_Daemon, 0);

/**
 * @generated from message backend.Blueprint
 */
export type Blueprint = Message<"backend.Blueprint"> & {
  /**
   * @generated from field: string bid = 1;
   */
  bid: string;

  /**
   * @generated from field: uint32 version = 2;
   */
  version: number;

  /**
   * @generated from field: repeated string flags = 3;
   */
  flags: string[];

  /**
   * only the uri
   *
   * @generated from field: repeated string docker_images = 4;
   */
  dockerImages: string[];

  /**
   * @generated from field: repeated backend.BlockedFile blocked_files = 5;
   */
  blockedFiles: BlockedFile[];

  /**
   * @generated from field: string server_binary = 6;
   */
  serverBinary: string;

  /**
   * @generated from field: string start_command = 7;
   */
  startCommand: string;

  /**
   * @generated from field: string stop_command = 8;
   */
  stopCommand: string;

  /**
   * @generated from field: string setup_script_base64 = 9;
   */
  setupScriptBase64: string;

  /**
   * @generated from field: string setup_docker_image = 10;
   */
  setupDockerImage: string;

  /**
   * @generated from field: string setup_script_interpreter = 11;
   */
  setupScriptInterpreter: string;
};

/**
 * Describes the message backend.Blueprint.
 * Use `create(BlueprintSchema)` to create a new message.
 */
export const BlueprintSchema: GenMessage<Blueprint> = /*@__PURE__*/
  messageDesc(file_backend_Daemon, 1);

/**
 * @generated from message backend.BlockedFile
 */
export type BlockedFile = Message<"backend.BlockedFile"> & {
  /**
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * @generated from field: bool visible = 2;
   */
  visible: boolean;

  /**
   * @generated from field: bool readable = 3;
   */
  readable: boolean;
};

/**
 * Describes the message backend.BlockedFile.
 * Use `create(BlockedFileSchema)` to create a new message.
 */
export const BlockedFileSchema: GenMessage<BlockedFile> = /*@__PURE__*/
  messageDesc(file_backend_Daemon, 2);

/**
 * @generated from message backend.Server
 */
export type Server = Message<"backend.Server"> & {
  /**
   * @generated from field: string sid = 1;
   */
  sid: string;

  /**
   * @generated from field: string owner_id = 2;
   */
  ownerId: string;

  /**
   * @generated from field: repeated string user_ids = 3;
   */
  userIds: string[];

  /**
   * @generated from field: repeated common.IPAllocation allocations = 4;
   */
  allocations: IPAllocation[];

  /**
   * @generated from field: common.ResourceLimit resource_limit = 5;
   */
  resourceLimit?: ResourceLimit;

  /**
   * @generated from field: string docker_image = 6;
   */
  dockerImage: string;

  /**
   * @generated from field: string bid = 7;
   */
  bid: string;
};

/**
 * Describes the message backend.Server.
 * Use `create(ServerSchema)` to create a new message.
 */
export const ServerSchema: GenMessage<Server> = /*@__PURE__*/
  messageDesc(file_backend_Daemon, 3);

/**
 * @generated from service backend.DaemonService
 */
export const DaemonService: GenService<{
  /**
   * @generated from rpc backend.DaemonService.RegisterDaemon
   */
  registerDaemon: {
    methodKind: "unary";
    input: typeof RegisterDaemonRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc backend.DaemonService.SyncBlueprints
   */
  syncBlueprints: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof BlueprintSchema;
  },
  /**
   * @generated from rpc backend.DaemonService.GetBlueprint
   */
  getBlueprint: {
    methodKind: "unary";
    input: typeof SimpleIDMessageSchema;
    output: typeof BlueprintSchema;
  },
  /**
   * @generated from rpc backend.DaemonService.SyncServers
   */
  syncServers: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof ServerSchema;
  },
  /**
   * @generated from rpc backend.DaemonService.GetServer
   */
  getServer: {
    methodKind: "unary";
    input: typeof SimpleIDMessageSchema;
    output: typeof ServerSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_backend_Daemon, 0);


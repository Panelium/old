// @generated by protoc-gen-es v2.5.0 with parameter "target=js+dts,import_extension=none,js_import_style=module"
// @generated from file backend_Auth.proto (package backend, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema, SuccessMessageSchema } from "./common_pb";

/**
 * Describes the file backend_Auth.proto.
 */
export declare const file_backend_Auth: GenFile;

/**
 * @generated from message backend.RegisterRequest
 */
export declare type RegisterRequest = Message<"backend.RegisterRequest"> & {
  /**
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * @generated from field: string email = 2;
   */
  email: string;

  /**
   * @generated from field: string password = 3;
   */
  password: string;
};

/**
 * Describes the message backend.RegisterRequest.
 * Use `create(RegisterRequestSchema)` to create a new message.
 */
export declare const RegisterRequestSchema: GenMessage<RegisterRequest>;

/**
 * @generated from message backend.LoginRequest
 */
export declare type LoginRequest = Message<"backend.LoginRequest"> & {
  /**
   * @generated from field: string username = 1;
   */
  username: string;

  /**
   * @generated from field: string password = 2;
   */
  password: string;
};

/**
 * Describes the message backend.LoginRequest.
 * Use `create(LoginRequestSchema)` to create a new message.
 */
export declare const LoginRequestSchema: GenMessage<LoginRequest>;

/**
 * @generated from message backend.LoginResponse
 */
export declare type LoginResponse = Message<"backend.LoginResponse"> & {
  /**
   * COOKIES
   * access_jwt (if auth success and mfa not required)
   * refresh_jwt (if auth success and mfa not required)
   *
   * mfa_jwt (if auth success and mfa required)
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: bool requires_mfa = 2;
   */
  requiresMfa: boolean;

  /**
   * (optional) types of MFA available for the user
   *
   * @generated from field: repeated backend.MFAType mfa_types_available = 3;
   */
  mfaTypesAvailable: MFAType[];
};

/**
 * Describes the message backend.LoginResponse.
 * Use `create(LoginResponseSchema)` to create a new message.
 */
export declare const LoginResponseSchema: GenMessage<LoginResponse>;

/**
 * @generated from message backend.ChangePasswordRequest
 */
export declare type ChangePasswordRequest = Message<"backend.ChangePasswordRequest"> & {
  /**
   * REQUEST COOKIES
   * access_jwt
   * refresh_jwt - high security change, requires refresh token validation
   *
   * @generated from field: string old_password = 1;
   */
  oldPassword: string;

  /**
   * @generated from field: string new_password = 2;
   */
  newPassword: string;
};

/**
 * Describes the message backend.ChangePasswordRequest.
 * Use `create(ChangePasswordRequestSchema)` to create a new message.
 */
export declare const ChangePasswordRequestSchema: GenMessage<ChangePasswordRequest>;

/**
 * @generated from message backend.ChangePasswordResponse
 */
export declare type ChangePasswordResponse = Message<"backend.ChangePasswordResponse"> & {
  /**
   * COOKIES
   * (ROTATE) access_jwt (if change password success)
   * (ROTATE) refresh_jwt (if change password success)
   *
   * mfa_jwt (if change password success but additional MFA required)
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: bool requires_mfa = 2;
   */
  requiresMfa: boolean;

  /**
   * (optional) types of MFA available for the user
   *
   * @generated from field: repeated backend.MFAType mfa_types_available = 3;
   */
  mfaTypesAvailable: MFAType[];
};

/**
 * Describes the message backend.ChangePasswordResponse.
 * Use `create(ChangePasswordResponseSchema)` to create a new message.
 */
export declare const ChangePasswordResponseSchema: GenMessage<ChangePasswordResponse>;

/**
 * @generated from message backend.RequestPasswordResetRequest
 */
export declare type RequestPasswordResetRequest = Message<"backend.RequestPasswordResetRequest"> & {
  /**
   * email to send the reset link to
   *
   * @generated from field: string email = 1;
   */
  email: string;
};

/**
 * Describes the message backend.RequestPasswordResetRequest.
 * Use `create(RequestPasswordResetRequestSchema)` to create a new message.
 */
export declare const RequestPasswordResetRequestSchema: GenMessage<RequestPasswordResetRequest>;

/**
 * @generated from message backend.ResetPasswordRequest
 */
export declare type ResetPasswordRequest = Message<"backend.ResetPasswordRequest"> & {
  /**
   * REQUEST COOKIES
   * reset_jwt
   *
   * @generated from field: string new_password = 1;
   */
  newPassword: string;
};

/**
 * Describes the message backend.ResetPasswordRequest.
 * Use `create(ResetPasswordRequestSchema)` to create a new message.
 */
export declare const ResetPasswordRequestSchema: GenMessage<ResetPasswordRequest>;

/**
 * @generated from message backend.ResetPasswordResponse
 */
export declare type ResetPasswordResponse = Message<"backend.ResetPasswordResponse"> & {
  /**
   * COOKIES
   * (CLEAR) access_jwt (if reset password success)
   * (CLEAR) refresh_jwt (if reset password success)
   *
   * (CLEAR+INVALIDATE) reset_jwt (if reset password success)
   * mfa_jwt (if reset password success but additional MFA required)
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: bool requires_mfa = 2;
   */
  requiresMfa: boolean;

  /**
   * (optional) types of MFA available for the user
   *
   * @generated from field: repeated backend.MFAType mfa_types_available = 3;
   */
  mfaTypesAvailable: MFAType[];
};

/**
 * Describes the message backend.ResetPasswordResponse.
 * Use `create(ResetPasswordResponseSchema)` to create a new message.
 */
export declare const ResetPasswordResponseSchema: GenMessage<ResetPasswordResponse>;

/**
 * only for MFA types that require the backend to send a code (e.g. SMS, Email)
 *
 * @generated from message backend.RequestMFACodeRequest
 */
export declare type RequestMFACodeRequest = Message<"backend.RequestMFACodeRequest"> & {
  /**
   * REQUEST COOKIES
   * mfa_jwt
   *
   * type of MFA to use
   *
   * @generated from field: backend.MFAType mfa_type = 2;
   */
  mfaType: MFAType;
};

/**
 * Describes the message backend.RequestMFACodeRequest.
 * Use `create(RequestMFACodeRequestSchema)` to create a new message.
 */
export declare const RequestMFACodeRequestSchema: GenMessage<RequestMFACodeRequest>;

/**
 * @generated from message backend.VerifyMFARequest
 */
export declare type VerifyMFARequest = Message<"backend.VerifyMFARequest"> & {
  /**
   * REQUEST COOKIES
   * mfa_jwt
   *
   * @generated from field: string mfa_code = 1;
   */
  mfaCode: string;
};

/**
 * Describes the message backend.VerifyMFARequest.
 * Use `create(VerifyMFARequestSchema)` to create a new message.
 */
export declare const VerifyMFARequestSchema: GenMessage<VerifyMFARequest>;

/**
 * @generated from message backend.VerifyMFAResponse
 */
export declare type VerifyMFAResponse = Message<"backend.VerifyMFAResponse"> & {
  /**
   * COOKIES
   * access_jwt (if auth and MFA success and no additional MFA required)
   * refresh_jwt (if auth and MFA success and no additional MFA required)
   *
   * (ROTATE) mfa_jwt (if auth and MFA success but additional MFA required)
   *
   * (CLEAR) mfa_jwt (if auth and MFA success and no additional MFA required)
   * (CLEAR+INVALIDATE) reset_jwt (if auth and MFA success and no additional MFA required)
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: bool requires_additional_mfa = 2;
   */
  requiresAdditionalMfa: boolean;

  /**
   * @generated from field: repeated backend.MFAType mfa_types_available = 3;
   */
  mfaTypesAvailable: MFAType[];
};

/**
 * Describes the message backend.VerifyMFAResponse.
 * Use `create(VerifyMFAResponseSchema)` to create a new message.
 */
export declare const VerifyMFAResponseSchema: GenMessage<VerifyMFAResponse>;

/**
 * @generated from enum backend.MFAType
 */
export enum MFAType {
  /**
   * @generated from enum value: MFA_TYPE_UNSPECIFIED = 0;
   */
  MFA_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: MFA_TYPE_TOTP = 1;
   */
  MFA_TYPE_TOTP = 1,

  /**
   * @generated from enum value: MFA_TYPE_SMS = 2;
   */
  MFA_TYPE_SMS = 2,

  /**
   * @generated from enum value: MFA_TYPE_EMAIL = 3;
   */
  MFA_TYPE_EMAIL = 3,
}

/**
 * Describes the enum backend.MFAType.
 */
export declare const MFATypeSchema: GenEnum<MFAType>;

/**
 * @generated from service backend.AuthService
 */
export declare const AuthService: GenService<{
  /**
   * @generated from rpc backend.AuthService.Register
   */
  register: {
    methodKind: "unary";
    input: typeof RegisterRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc backend.AuthService.Login
   */
  login: {
    methodKind: "unary";
    input: typeof LoginRequestSchema;
    output: typeof LoginResponseSchema;
  },
  /**
   * @generated from rpc backend.AuthService.ChangePassword
   */
  changePassword: {
    methodKind: "unary";
    input: typeof ChangePasswordRequestSchema;
    output: typeof ChangePasswordResponseSchema;
  },
  /**
   * @generated from rpc backend.AuthService.ChangePasswordRequestMFACode
   */
  changePasswordRequestMFACode: {
    methodKind: "unary";
    input: typeof RequestMFACodeRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc backend.AuthService.ChangePasswordVerifyMFA
   */
  changePasswordVerifyMFA: {
    methodKind: "unary";
    input: typeof VerifyMFARequestSchema;
    output: typeof VerifyMFAResponseSchema;
  },
  /**
   * @generated from rpc backend.AuthService.RequestPasswordReset
   */
  requestPasswordReset: {
    methodKind: "unary";
    input: typeof RequestPasswordResetRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc backend.AuthService.ResetPassword
   */
  resetPassword: {
    methodKind: "unary";
    input: typeof ResetPasswordRequestSchema;
    output: typeof ResetPasswordResponseSchema;
  },
  /**
   * @generated from rpc backend.AuthService.ResetPasswordRequestMFACode
   */
  resetPasswordRequestMFACode: {
    methodKind: "unary";
    input: typeof RequestMFACodeRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc backend.AuthService.ResetPasswordVerifyMFA
   */
  resetPasswordVerifyMFA: {
    methodKind: "unary";
    input: typeof VerifyMFARequestSchema;
    output: typeof VerifyMFAResponseSchema;
  },
  /**
   * @generated from rpc backend.AuthService.RequestMFACode
   */
  requestMFACode: {
    methodKind: "unary";
    input: typeof RequestMFACodeRequestSchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc backend.AuthService.VerifyMFA
   */
  verifyMFA: {
    methodKind: "unary";
    input: typeof VerifyMFARequestSchema;
    output: typeof VerifyMFAResponseSchema;
  },
  /**
   * @generated from rpc backend.AuthService.RefreshToken
   */
  refreshToken: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof SuccessMessageSchema;
  },
  /**
   * @generated from rpc backend.AuthService.Logout
   */
  logout: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof SuccessMessageSchema;
  },
}>;


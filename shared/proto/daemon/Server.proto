syntax = "proto3";

package daemon;
option go_package = "panelium/proto_gen_go/daemon";

import "common.proto";
import "google/protobuf/timestamp.proto";

service ServerService {
  rpc CreateServer(CreateServerRequest) returns (common.SuccessMessage);
  rpc UpdateServer(UpdateServerRequest) returns (common.SuccessMessage);
  rpc DeleteServer(DeleteServerRequest) returns (common.SuccessMessage);

  rpc Console(stream common.StreamIDMessage) returns (stream common.SimpleMessage);
  rpc Terminal(stream common.StreamIDMessage) returns (stream common.SimpleMessage);

  rpc Status(common.SimpleIDMessage) returns (ServerStatus);
  rpc ResourceUsage(common.SimpleIDMessage) returns (stream ResourceUsageMessage);

  rpc PowerAction(PowerActionMessage) returns (common.SuccessMessage);

  rpc Install(common.SimpleIDMessage) returns (common.SuccessMessage);
}

message CreateServerRequest {
  string serverId = 1;
  string ownerId = 2;
  repeated string userIds = 3;
  repeated Allocation allocations = 4;
  ResourceLimit resourceLimit = 5;
  string blueprintId = 6;
  string dockerImage = 7;
}

// TODO: this should probably instead be pulled from backend on server startup
message UpdateServerRequest {
  string serverId = 1;
  repeated string userIds = 3; //optional
  repeated Allocation allocations = 4; //optional
  optional ResourceLimit resourceLimit = 5;
  optional string blueprintId = 6;
  optional string dockerImage = 7;
}

message DeleteServerRequest {
  string serverId = 1;
  bool force = 2;
}

message Allocation {
  string ip = 1;
  uint32 port = 2; // MUST BE 1024-65535
}

message ResourceLimit {
  uint32 cpu = 1;     // CPU in percentage (100% = 1 vCore)
  uint32 ram = 2;     // RAM in MB
  uint32 swap = 3;    // SWAP in MB
  uint32 storage = 4; // Storage in MB
}

message ResourceUsage {
  float cpu = 1;     // CPU in percentage (100% = 1 vCore)
  float ram = 2;     // RAM in MB
  float storage = 3; // Storage in MB
}

message ServerStatus {
  ServerStatusType status = 1;
  optional google.protobuf.Timestamp timestampStart = 2;
  optional google.protobuf.Timestamp timestampEnd = 3;
  optional ServerOfflineReason offlineReason = 4;
}

enum ServerStatusType {
  SERVER_STATUS_TYPE_UNKNOWN = 0;
  SERVER_STATUS_TYPE_STARTING = 1;
  SERVER_STATUS_TYPE_ONLINE = 2;
  SERVER_STATUS_TYPE_STOPPING = 3;
  SERVER_STATUS_TYPE_OFFLINE = 4;
  SERVER_STATUS_TYPE_INSTALLING = 5;
}

enum ServerOfflineReason {
  SERVER_OFFLINE_REASON_UNKNOWN = 0;
  SERVER_OFFLINE_REASON_CREATED = 1; // created or installed
  SERVER_OFFLINE_REASON_STOPPED = 2;
  SERVER_OFFLINE_REASON_KILLED = 3;
  SERVER_OFFLINE_REASON_ERROR = 4;
}

enum PowerAction {
  POWER_ACTION_UNSPECIFIED = 0; // Default value, should not be used
  POWER_ACTION_START = 1;
  POWER_ACTION_RESTART = 2;
  POWER_ACTION_STOP = 3;
  POWER_ACTION_KILL = 4;
}

message PowerActionMessage {
  string serverId = 1;
  PowerAction action = 2;
}

message ResourceUsageMessage {
  ResourceUsage usage = 2;
}
syntax = "proto3";

package daemon;
option go_package = "panelium/proto_gen_go";

import "common.proto";
import "google/protobuf/timestamp.proto";

service ServerService {
  /// Server Management
  /// - Called by backend, needs token
  rpc CreateServer(CreateServerRequest) returns (common.SuccessMessage);
  rpc DeleteServer(DeleteServerRequest) returns (common.SuccessMessage);

  /// Server Actions - Requires a ServerID http header
  /// - Called by client, needs jwt
  // Console (process)
  rpc Console(stream common.SimpleMessage) returns (stream common.SimpleMessage);
  rpc RunCommand(common.SimpleMessage) returns (common.SuccessMessage);

  // Terminal (system)
  rpc Terminal(stream common.SimpleMessage) returns (stream common.SimpleMessage);
  rpc RunTerminalCommand(common.SimpleMessage) returns (common.SuccessMessage);

  // Server Info
  rpc GetStatus(common.Empty) returns (ServerStatus);

  // Power Actions
  rpc PowerAction(PowerActionMessage) returns (common.SuccessMessage);

  // Installation
  rpc Install(common.Empty) returns (common.SuccessMessage);
}

message Allocation {
  string ip = 1;
  uint32 port = 2; // MUST BE 1024-65535
}

message ResourceLimit {
  uint32 cpu = 1;     // CPU in percentage (100% = 1 vCore)
  uint32 ram = 2;     // RAM in MB
  uint32 swap = 3;    // SWAP in MB
  uint32 storage = 4; // Storage in MB
}

message ResourceUsage {
  uint32 cpu = 1;     // CPU in percentage (100% = 1 vCore)
  uint32 ram = 2;     // RAM in MB
  uint32 swap = 3;    // SWAP in MB
  uint32 storage = 4; // Storage in MB
}

// Server Management
message CreateServerRequest {
  string serverId = 1;
  repeated Allocation allocations = 2;
  ResourceLimit resourceLimit = 3;
  string blueprintId = 4;
  string dockerImage = 5;
}

message DeleteServerRequest {
  string serverId = 1;
  bool force = 2;
}

// Server Info
message ServerStatus {
  ServerStatusType status = 1;
  optional google.protobuf.Timestamp timestampStart = 2;
  optional google.protobuf.Timestamp timestampEnd = 3;
  optional ServerOfflineReason offlineReason = 4;
  ResourceUsage resourceUsage = 5;
}
// use https://pkg.go.dev/google.golang.org/protobuf/types/known/timestamppb to handle timestamps

enum ServerStatusType {
  SERVER_STATUS_TYPE_UNKNOWN = 0;
  SERVER_STATUS_TYPE_STARTING = 1;
  SERVER_STATUS_TYPE_ONLINE = 2;
  SERVER_STATUS_TYPE_STOPPING = 3;
  SERVER_STATUS_TYPE_OFFLINE = 4;
  SERVER_STATUS_TYPE_INSTALLING = 5;
}

enum ServerOfflineReason {
  SERVER_OFFLINE_REASON_UNKNOWN = 0;
  SERVER_OFFLINE_REASON_CREATED = 1;
  SERVER_OFFLINE_REASON_STOPPED = 2;
  SERVER_OFFLINE_REASON_KILLED = 3;
  SERVER_OFFLINE_REASON_ERROR = 4;
}

// Power Actions
enum PowerAction {
  POWER_ACTION_UNSPECIFIED = 0; // Default value, should not be used
  POWER_ACTION_START = 1;
  POWER_ACTION_RESTART = 2;
  POWER_ACTION_STOP = 3;
  POWER_ACTION_KILL = 4;
}

message PowerActionMessage {
  PowerAction action = 1;
}